
theory2_buttons.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002afc  08002afc  00012afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b1c  08002b1c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002b1c  08002b1c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b1c  08002b1c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b20  08002b20  00012b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000078  08002b9c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002b9c  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097f6  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc7  00000000  00000000  00029897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002b460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002beb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bfb  00000000  00000000  0002c808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b947  00000000  00000000  00043403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823ff  00000000  00000000  0004ed4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1149  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f0  00000000  00000000  000d119c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ae4 	.word	0x08002ae4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08002ae4 	.word	0x08002ae4

0800014c <red_updating>:
uint8_t		red_temp 	=	RED_INITIAL;
uint8_t 	yel_temp	= 	YEL_INITIAL;
uint8_t 	gre_temp	= 	GRE_INITIAL;
uint8_t		mode1_sw	= 	0;

uint8_t red_updating(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	return red_cnt;
 8000150:	4b02      	ldr	r3, [pc, #8]	; (800015c <red_updating+0x10>)
 8000152:	781b      	ldrb	r3, [r3, #0]
}
 8000154:	4618      	mov	r0, r3
 8000156:	46bd      	mov	sp, r7
 8000158:	bc80      	pop	{r7}
 800015a:	4770      	bx	lr
 800015c:	20000099 	.word	0x20000099

08000160 <yel_updating>:
uint8_t yel_updating(){
 8000160:	b480      	push	{r7}
 8000162:	af00      	add	r7, sp, #0
	return yel_cnt;
 8000164:	4b02      	ldr	r3, [pc, #8]	; (8000170 <yel_updating+0x10>)
 8000166:	781b      	ldrb	r3, [r3, #0]
}
 8000168:	4618      	mov	r0, r3
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	2000009a 	.word	0x2000009a

08000174 <gre_updating>:
uint8_t gre_updating(){
 8000174:	b480      	push	{r7}
 8000176:	af00      	add	r7, sp, #0
	return gre_cnt;
 8000178:	4b02      	ldr	r3, [pc, #8]	; (8000184 <gre_updating+0x10>)
 800017a:	781b      	ldrb	r3, [r3, #0]
}
 800017c:	4618      	mov	r0, r3
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	2000009b 	.word	0x2000009b

08000188 <mode1_sw_updating>:
uint8_t mode1_sw_updating(){
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0
	return mode1_sw;
 800018c:	4b02      	ldr	r3, [pc, #8]	; (8000198 <mode1_sw_updating+0x10>)
 800018e:	781b      	ldrb	r3, [r3, #0]
}
 8000190:	4618      	mov	r0, r3
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	2000009f 	.word	0x2000009f

0800019c <fsm_for_input_processing_1>:

void fsm_for_input_processing_1(void){
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	switch (button1_state){
 80001a0:	4b6f      	ldr	r3, [pc, #444]	; (8000360 <fsm_for_input_processing_1+0x1c4>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	2b02      	cmp	r3, #2
 80001a6:	f000 80cc 	beq.w	8000342 <fsm_for_input_processing_1+0x1a6>
 80001aa:	2b02      	cmp	r3, #2
 80001ac:	f300 80d6 	bgt.w	800035c <fsm_for_input_processing_1+0x1c0>
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d003      	beq.n	80001bc <fsm_for_input_processing_1+0x20>
 80001b4:	2b01      	cmp	r3, #1
 80001b6:	f000 80b0 	beq.w	800031a <fsm_for_input_processing_1+0x17e>
		}
		// todo

		break;
	}
}
 80001ba:	e0cf      	b.n	800035c <fsm_for_input_processing_1+0x1c0>
		if(is_button_pressed(BUTTON1)){
 80001bc:	2000      	movs	r0, #0
 80001be:	f000 fb5b 	bl	8000878 <is_button_pressed>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	f000 80a8 	beq.w	800031a <fsm_for_input_processing_1+0x17e>
			button1_state = BUTTON_PRESSED;
 80001ca:	4b65      	ldr	r3, [pc, #404]	; (8000360 <fsm_for_input_processing_1+0x1c4>)
 80001cc:	2201      	movs	r2, #1
 80001ce:	701a      	strb	r2, [r3, #0]
			mode++;
 80001d0:	4b64      	ldr	r3, [pc, #400]	; (8000364 <fsm_for_input_processing_1+0x1c8>)
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	3301      	adds	r3, #1
 80001d6:	b2da      	uxtb	r2, r3
 80001d8:	4b62      	ldr	r3, [pc, #392]	; (8000364 <fsm_for_input_processing_1+0x1c8>)
 80001da:	701a      	strb	r2, [r3, #0]
			if (mode > NUMBER_OF_MODES) mode = 1;
 80001dc:	4b61      	ldr	r3, [pc, #388]	; (8000364 <fsm_for_input_processing_1+0x1c8>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	2b04      	cmp	r3, #4
 80001e2:	d902      	bls.n	80001ea <fsm_for_input_processing_1+0x4e>
 80001e4:	4b5f      	ldr	r3, [pc, #380]	; (8000364 <fsm_for_input_processing_1+0x1c8>)
 80001e6:	2201      	movs	r2, #1
 80001e8:	701a      	strb	r2, [r3, #0]
			if (mode == 1){
 80001ea:	4b5e      	ldr	r3, [pc, #376]	; (8000364 <fsm_for_input_processing_1+0x1c8>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	2b01      	cmp	r3, #1
 80001f0:	d102      	bne.n	80001f8 <fsm_for_input_processing_1+0x5c>
				mode1_sw = 1;
 80001f2:	4b5d      	ldr	r3, [pc, #372]	; (8000368 <fsm_for_input_processing_1+0x1cc>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	701a      	strb	r2, [r3, #0]
			if (mode == 2){
 80001f8:	4b5a      	ldr	r3, [pc, #360]	; (8000364 <fsm_for_input_processing_1+0x1c8>)
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	2b02      	cmp	r3, #2
 80001fe:	d12b      	bne.n	8000258 <fsm_for_input_processing_1+0xbc>
				mode1_sw = 0;
 8000200:	4b59      	ldr	r3, [pc, #356]	; (8000368 <fsm_for_input_processing_1+0x1cc>)
 8000202:	2200      	movs	r2, #0
 8000204:	701a      	strb	r2, [r3, #0]
				traffic_light_update1(0, 99, 99);
 8000206:	2263      	movs	r2, #99	; 0x63
 8000208:	2163      	movs	r1, #99	; 0x63
 800020a:	2000      	movs	r0, #0
 800020c:	f000 febc 	bl	8000f88 <traffic_light_update1>
				traffic_light_update2(0, 99, 99);
 8000210:	2263      	movs	r2, #99	; 0x63
 8000212:	2163      	movs	r1, #99	; 0x63
 8000214:	2000      	movs	r0, #0
 8000216:	f000 ffe9 	bl	80011ec <traffic_light_update2>
				UpdateBuffer_7SEG_LEDS(2, red_cnt/10);
 800021a:	4b54      	ldr	r3, [pc, #336]	; (800036c <fsm_for_input_processing_1+0x1d0>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	4a54      	ldr	r2, [pc, #336]	; (8000370 <fsm_for_input_processing_1+0x1d4>)
 8000220:	fba2 2303 	umull	r2, r3, r2, r3
 8000224:	08db      	lsrs	r3, r3, #3
 8000226:	b2db      	uxtb	r3, r3
 8000228:	4619      	mov	r1, r3
 800022a:	2002      	movs	r0, #2
 800022c:	f000 fb58 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				UpdateBuffer_7SEG_LEDS(3, red_cnt%10);
 8000230:	4b4e      	ldr	r3, [pc, #312]	; (800036c <fsm_for_input_processing_1+0x1d0>)
 8000232:	781a      	ldrb	r2, [r3, #0]
 8000234:	4b4e      	ldr	r3, [pc, #312]	; (8000370 <fsm_for_input_processing_1+0x1d4>)
 8000236:	fba3 1302 	umull	r1, r3, r3, r2
 800023a:	08d9      	lsrs	r1, r3, #3
 800023c:	460b      	mov	r3, r1
 800023e:	009b      	lsls	r3, r3, #2
 8000240:	440b      	add	r3, r1
 8000242:	005b      	lsls	r3, r3, #1
 8000244:	1ad3      	subs	r3, r2, r3
 8000246:	b2db      	uxtb	r3, r3
 8000248:	4619      	mov	r1, r3
 800024a:	2003      	movs	r0, #3
 800024c:	f000 fb48 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				red_temp = red_cnt;
 8000250:	4b46      	ldr	r3, [pc, #280]	; (800036c <fsm_for_input_processing_1+0x1d0>)
 8000252:	781a      	ldrb	r2, [r3, #0]
 8000254:	4b47      	ldr	r3, [pc, #284]	; (8000374 <fsm_for_input_processing_1+0x1d8>)
 8000256:	701a      	strb	r2, [r3, #0]
			if (mode == 3){
 8000258:	4b42      	ldr	r3, [pc, #264]	; (8000364 <fsm_for_input_processing_1+0x1c8>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b03      	cmp	r3, #3
 800025e:	d128      	bne.n	80002b2 <fsm_for_input_processing_1+0x116>
				traffic_light_update1(99, 0, 99);
 8000260:	2263      	movs	r2, #99	; 0x63
 8000262:	2100      	movs	r1, #0
 8000264:	2063      	movs	r0, #99	; 0x63
 8000266:	f000 fe8f 	bl	8000f88 <traffic_light_update1>
				traffic_light_update2(99, 0, 99);
 800026a:	2263      	movs	r2, #99	; 0x63
 800026c:	2100      	movs	r1, #0
 800026e:	2063      	movs	r0, #99	; 0x63
 8000270:	f000 ffbc 	bl	80011ec <traffic_light_update2>
				UpdateBuffer_7SEG_LEDS(2, yel_cnt/10);
 8000274:	4b40      	ldr	r3, [pc, #256]	; (8000378 <fsm_for_input_processing_1+0x1dc>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	4a3d      	ldr	r2, [pc, #244]	; (8000370 <fsm_for_input_processing_1+0x1d4>)
 800027a:	fba2 2303 	umull	r2, r3, r2, r3
 800027e:	08db      	lsrs	r3, r3, #3
 8000280:	b2db      	uxtb	r3, r3
 8000282:	4619      	mov	r1, r3
 8000284:	2002      	movs	r0, #2
 8000286:	f000 fb2b 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				UpdateBuffer_7SEG_LEDS(3, yel_cnt%10);
 800028a:	4b3b      	ldr	r3, [pc, #236]	; (8000378 <fsm_for_input_processing_1+0x1dc>)
 800028c:	781a      	ldrb	r2, [r3, #0]
 800028e:	4b38      	ldr	r3, [pc, #224]	; (8000370 <fsm_for_input_processing_1+0x1d4>)
 8000290:	fba3 1302 	umull	r1, r3, r3, r2
 8000294:	08d9      	lsrs	r1, r3, #3
 8000296:	460b      	mov	r3, r1
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	440b      	add	r3, r1
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	1ad3      	subs	r3, r2, r3
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	4619      	mov	r1, r3
 80002a4:	2003      	movs	r0, #3
 80002a6:	f000 fb1b 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				yel_temp = yel_cnt;
 80002aa:	4b33      	ldr	r3, [pc, #204]	; (8000378 <fsm_for_input_processing_1+0x1dc>)
 80002ac:	781a      	ldrb	r2, [r3, #0]
 80002ae:	4b33      	ldr	r3, [pc, #204]	; (800037c <fsm_for_input_processing_1+0x1e0>)
 80002b0:	701a      	strb	r2, [r3, #0]
			if (mode == 4){
 80002b2:	4b2c      	ldr	r3, [pc, #176]	; (8000364 <fsm_for_input_processing_1+0x1c8>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b04      	cmp	r3, #4
 80002b8:	d128      	bne.n	800030c <fsm_for_input_processing_1+0x170>
				traffic_light_update1(99, 99, 0);
 80002ba:	2200      	movs	r2, #0
 80002bc:	2163      	movs	r1, #99	; 0x63
 80002be:	2063      	movs	r0, #99	; 0x63
 80002c0:	f000 fe62 	bl	8000f88 <traffic_light_update1>
				traffic_light_update2(99, 99, 0);
 80002c4:	2200      	movs	r2, #0
 80002c6:	2163      	movs	r1, #99	; 0x63
 80002c8:	2063      	movs	r0, #99	; 0x63
 80002ca:	f000 ff8f 	bl	80011ec <traffic_light_update2>
				UpdateBuffer_7SEG_LEDS(2, gre_cnt/10);
 80002ce:	4b2c      	ldr	r3, [pc, #176]	; (8000380 <fsm_for_input_processing_1+0x1e4>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	4a27      	ldr	r2, [pc, #156]	; (8000370 <fsm_for_input_processing_1+0x1d4>)
 80002d4:	fba2 2303 	umull	r2, r3, r2, r3
 80002d8:	08db      	lsrs	r3, r3, #3
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	4619      	mov	r1, r3
 80002de:	2002      	movs	r0, #2
 80002e0:	f000 fafe 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				UpdateBuffer_7SEG_LEDS(3, gre_cnt%10);
 80002e4:	4b26      	ldr	r3, [pc, #152]	; (8000380 <fsm_for_input_processing_1+0x1e4>)
 80002e6:	781a      	ldrb	r2, [r3, #0]
 80002e8:	4b21      	ldr	r3, [pc, #132]	; (8000370 <fsm_for_input_processing_1+0x1d4>)
 80002ea:	fba3 1302 	umull	r1, r3, r3, r2
 80002ee:	08d9      	lsrs	r1, r3, #3
 80002f0:	460b      	mov	r3, r1
 80002f2:	009b      	lsls	r3, r3, #2
 80002f4:	440b      	add	r3, r1
 80002f6:	005b      	lsls	r3, r3, #1
 80002f8:	1ad3      	subs	r3, r2, r3
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	4619      	mov	r1, r3
 80002fe:	2003      	movs	r0, #3
 8000300:	f000 faee 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				gre_temp = gre_cnt;
 8000304:	4b1e      	ldr	r3, [pc, #120]	; (8000380 <fsm_for_input_processing_1+0x1e4>)
 8000306:	781a      	ldrb	r2, [r3, #0]
 8000308:	4b1e      	ldr	r3, [pc, #120]	; (8000384 <fsm_for_input_processing_1+0x1e8>)
 800030a:	701a      	strb	r2, [r3, #0]
			UpdateBuffer_7SEG_LEDS(1, mode);
 800030c:	4b15      	ldr	r3, [pc, #84]	; (8000364 <fsm_for_input_processing_1+0x1c8>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	4619      	mov	r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	f000 fae4 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
			break;
 8000318:	e020      	b.n	800035c <fsm_for_input_processing_1+0x1c0>
		if (!is_button_pressed(BUTTON1))
 800031a:	2000      	movs	r0, #0
 800031c:	f000 faac 	bl	8000878 <is_button_pressed>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d103      	bne.n	800032e <fsm_for_input_processing_1+0x192>
			button1_state = BUTTON_RELEASED;
 8000326:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <fsm_for_input_processing_1+0x1c4>)
 8000328:	2200      	movs	r2, #0
 800032a:	701a      	strb	r2, [r3, #0]
		break;
 800032c:	e013      	b.n	8000356 <fsm_for_input_processing_1+0x1ba>
			if(is_button_pressed_1s(BUTTON1))
 800032e:	2000      	movs	r0, #0
 8000330:	f000 fabc 	bl	80008ac <is_button_pressed_1s>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d00d      	beq.n	8000356 <fsm_for_input_processing_1+0x1ba>
				button1_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <fsm_for_input_processing_1+0x1c4>)
 800033c:	2202      	movs	r2, #2
 800033e:	701a      	strb	r2, [r3, #0]
		break;
 8000340:	e009      	b.n	8000356 <fsm_for_input_processing_1+0x1ba>
		if (!is_button_pressed (BUTTON1)) {
 8000342:	2000      	movs	r0, #0
 8000344:	f000 fa98 	bl	8000878 <is_button_pressed>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d105      	bne.n	800035a <fsm_for_input_processing_1+0x1be>
			button1_state = BUTTON_RELEASED;
 800034e:	4b04      	ldr	r3, [pc, #16]	; (8000360 <fsm_for_input_processing_1+0x1c4>)
 8000350:	2200      	movs	r2, #0
 8000352:	701a      	strb	r2, [r3, #0]
		break;
 8000354:	e001      	b.n	800035a <fsm_for_input_processing_1+0x1be>
		break;
 8000356:	bf00      	nop
 8000358:	e000      	b.n	800035c <fsm_for_input_processing_1+0x1c0>
		break;
 800035a:	bf00      	nop
}
 800035c:	bf00      	nop
 800035e:	bd80      	pop	{r7, pc}
 8000360:	20000094 	.word	0x20000094
 8000364:	20000098 	.word	0x20000098
 8000368:	2000009f 	.word	0x2000009f
 800036c:	20000099 	.word	0x20000099
 8000370:	cccccccd 	.word	0xcccccccd
 8000374:	2000009c 	.word	0x2000009c
 8000378:	2000009a 	.word	0x2000009a
 800037c:	2000009d 	.word	0x2000009d
 8000380:	2000009b 	.word	0x2000009b
 8000384:	2000009e 	.word	0x2000009e

08000388 <fsm_for_input_processing_2>:

void fsm_for_input_processing_2(void){
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	switch (button2_state){
 800038c:	4b60      	ldr	r3, [pc, #384]	; (8000510 <fsm_for_input_processing_2+0x188>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b02      	cmp	r3, #2
 8000392:	f000 80ac 	beq.w	80004ee <fsm_for_input_processing_2+0x166>
 8000396:	2b02      	cmp	r3, #2
 8000398:	f300 80b8 	bgt.w	800050c <fsm_for_input_processing_2+0x184>
 800039c:	2b00      	cmp	r3, #0
 800039e:	d003      	beq.n	80003a8 <fsm_for_input_processing_2+0x20>
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	f000 8090 	beq.w	80004c6 <fsm_for_input_processing_2+0x13e>
		}
		// todo

		break;
	}
}
 80003a6:	e0b1      	b.n	800050c <fsm_for_input_processing_2+0x184>
		if(is_button_pressed(BUTTON2)){
 80003a8:	2001      	movs	r0, #1
 80003aa:	f000 fa65 	bl	8000878 <is_button_pressed>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	f000 80a6 	beq.w	8000502 <fsm_for_input_processing_2+0x17a>
			button2_state = BUTTON_PRESSED;
 80003b6:	4b56      	ldr	r3, [pc, #344]	; (8000510 <fsm_for_input_processing_2+0x188>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	701a      	strb	r2, [r3, #0]
			if (mode == 2){
 80003bc:	4b55      	ldr	r3, [pc, #340]	; (8000514 <fsm_for_input_processing_2+0x18c>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2b02      	cmp	r3, #2
 80003c2:	d127      	bne.n	8000414 <fsm_for_input_processing_2+0x8c>
				if (++red_temp > MAX_CNT) red_temp = MIN_CNT;
 80003c4:	4b54      	ldr	r3, [pc, #336]	; (8000518 <fsm_for_input_processing_2+0x190>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	3301      	adds	r3, #1
 80003ca:	b2da      	uxtb	r2, r3
 80003cc:	4b52      	ldr	r3, [pc, #328]	; (8000518 <fsm_for_input_processing_2+0x190>)
 80003ce:	701a      	strb	r2, [r3, #0]
 80003d0:	4b51      	ldr	r3, [pc, #324]	; (8000518 <fsm_for_input_processing_2+0x190>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b63      	cmp	r3, #99	; 0x63
 80003d6:	d902      	bls.n	80003de <fsm_for_input_processing_2+0x56>
 80003d8:	4b4f      	ldr	r3, [pc, #316]	; (8000518 <fsm_for_input_processing_2+0x190>)
 80003da:	2201      	movs	r2, #1
 80003dc:	701a      	strb	r2, [r3, #0]
				UpdateBuffer_7SEG_LEDS(3, red_temp%10);
 80003de:	4b4e      	ldr	r3, [pc, #312]	; (8000518 <fsm_for_input_processing_2+0x190>)
 80003e0:	781a      	ldrb	r2, [r3, #0]
 80003e2:	4b4e      	ldr	r3, [pc, #312]	; (800051c <fsm_for_input_processing_2+0x194>)
 80003e4:	fba3 1302 	umull	r1, r3, r3, r2
 80003e8:	08d9      	lsrs	r1, r3, #3
 80003ea:	460b      	mov	r3, r1
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	440b      	add	r3, r1
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	1ad3      	subs	r3, r2, r3
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	4619      	mov	r1, r3
 80003f8:	2003      	movs	r0, #3
 80003fa:	f000 fa71 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				UpdateBuffer_7SEG_LEDS(2, red_temp/10);
 80003fe:	4b46      	ldr	r3, [pc, #280]	; (8000518 <fsm_for_input_processing_2+0x190>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	4a46      	ldr	r2, [pc, #280]	; (800051c <fsm_for_input_processing_2+0x194>)
 8000404:	fba2 2303 	umull	r2, r3, r2, r3
 8000408:	08db      	lsrs	r3, r3, #3
 800040a:	b2db      	uxtb	r3, r3
 800040c:	4619      	mov	r1, r3
 800040e:	2002      	movs	r0, #2
 8000410:	f000 fa66 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
			if (mode == 3){
 8000414:	4b3f      	ldr	r3, [pc, #252]	; (8000514 <fsm_for_input_processing_2+0x18c>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b03      	cmp	r3, #3
 800041a:	d127      	bne.n	800046c <fsm_for_input_processing_2+0xe4>
				if (++yel_temp > MAX_CNT) yel_temp = MIN_CNT;
 800041c:	4b40      	ldr	r3, [pc, #256]	; (8000520 <fsm_for_input_processing_2+0x198>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	3301      	adds	r3, #1
 8000422:	b2da      	uxtb	r2, r3
 8000424:	4b3e      	ldr	r3, [pc, #248]	; (8000520 <fsm_for_input_processing_2+0x198>)
 8000426:	701a      	strb	r2, [r3, #0]
 8000428:	4b3d      	ldr	r3, [pc, #244]	; (8000520 <fsm_for_input_processing_2+0x198>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b63      	cmp	r3, #99	; 0x63
 800042e:	d902      	bls.n	8000436 <fsm_for_input_processing_2+0xae>
 8000430:	4b3b      	ldr	r3, [pc, #236]	; (8000520 <fsm_for_input_processing_2+0x198>)
 8000432:	2201      	movs	r2, #1
 8000434:	701a      	strb	r2, [r3, #0]
				UpdateBuffer_7SEG_LEDS(3, yel_temp%10);
 8000436:	4b3a      	ldr	r3, [pc, #232]	; (8000520 <fsm_for_input_processing_2+0x198>)
 8000438:	781a      	ldrb	r2, [r3, #0]
 800043a:	4b38      	ldr	r3, [pc, #224]	; (800051c <fsm_for_input_processing_2+0x194>)
 800043c:	fba3 1302 	umull	r1, r3, r3, r2
 8000440:	08d9      	lsrs	r1, r3, #3
 8000442:	460b      	mov	r3, r1
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	440b      	add	r3, r1
 8000448:	005b      	lsls	r3, r3, #1
 800044a:	1ad3      	subs	r3, r2, r3
 800044c:	b2db      	uxtb	r3, r3
 800044e:	4619      	mov	r1, r3
 8000450:	2003      	movs	r0, #3
 8000452:	f000 fa45 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				UpdateBuffer_7SEG_LEDS(2, yel_temp/10);
 8000456:	4b32      	ldr	r3, [pc, #200]	; (8000520 <fsm_for_input_processing_2+0x198>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	4a30      	ldr	r2, [pc, #192]	; (800051c <fsm_for_input_processing_2+0x194>)
 800045c:	fba2 2303 	umull	r2, r3, r2, r3
 8000460:	08db      	lsrs	r3, r3, #3
 8000462:	b2db      	uxtb	r3, r3
 8000464:	4619      	mov	r1, r3
 8000466:	2002      	movs	r0, #2
 8000468:	f000 fa3a 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
			if (mode == 4){
 800046c:	4b29      	ldr	r3, [pc, #164]	; (8000514 <fsm_for_input_processing_2+0x18c>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b04      	cmp	r3, #4
 8000472:	d146      	bne.n	8000502 <fsm_for_input_processing_2+0x17a>
				if (++gre_temp > MAX_CNT) gre_temp = MIN_CNT;
 8000474:	4b2b      	ldr	r3, [pc, #172]	; (8000524 <fsm_for_input_processing_2+0x19c>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	3301      	adds	r3, #1
 800047a:	b2da      	uxtb	r2, r3
 800047c:	4b29      	ldr	r3, [pc, #164]	; (8000524 <fsm_for_input_processing_2+0x19c>)
 800047e:	701a      	strb	r2, [r3, #0]
 8000480:	4b28      	ldr	r3, [pc, #160]	; (8000524 <fsm_for_input_processing_2+0x19c>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b63      	cmp	r3, #99	; 0x63
 8000486:	d902      	bls.n	800048e <fsm_for_input_processing_2+0x106>
 8000488:	4b26      	ldr	r3, [pc, #152]	; (8000524 <fsm_for_input_processing_2+0x19c>)
 800048a:	2201      	movs	r2, #1
 800048c:	701a      	strb	r2, [r3, #0]
				UpdateBuffer_7SEG_LEDS(3, gre_temp%10);
 800048e:	4b25      	ldr	r3, [pc, #148]	; (8000524 <fsm_for_input_processing_2+0x19c>)
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	4b22      	ldr	r3, [pc, #136]	; (800051c <fsm_for_input_processing_2+0x194>)
 8000494:	fba3 1302 	umull	r1, r3, r3, r2
 8000498:	08d9      	lsrs	r1, r3, #3
 800049a:	460b      	mov	r3, r1
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	440b      	add	r3, r1
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	1ad3      	subs	r3, r2, r3
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	4619      	mov	r1, r3
 80004a8:	2003      	movs	r0, #3
 80004aa:	f000 fa19 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				UpdateBuffer_7SEG_LEDS(2, gre_temp/10);
 80004ae:	4b1d      	ldr	r3, [pc, #116]	; (8000524 <fsm_for_input_processing_2+0x19c>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	4a1a      	ldr	r2, [pc, #104]	; (800051c <fsm_for_input_processing_2+0x194>)
 80004b4:	fba2 2303 	umull	r2, r3, r2, r3
 80004b8:	08db      	lsrs	r3, r3, #3
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	4619      	mov	r1, r3
 80004be:	2002      	movs	r0, #2
 80004c0:	f000 fa0e 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
		break;
 80004c4:	e01d      	b.n	8000502 <fsm_for_input_processing_2+0x17a>
		if (!is_button_pressed(BUTTON2))
 80004c6:	2001      	movs	r0, #1
 80004c8:	f000 f9d6 	bl	8000878 <is_button_pressed>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d103      	bne.n	80004da <fsm_for_input_processing_2+0x152>
			button2_state = BUTTON_RELEASED;
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <fsm_for_input_processing_2+0x188>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
		break;
 80004d8:	e015      	b.n	8000506 <fsm_for_input_processing_2+0x17e>
			if(is_button_pressed_1s(BUTTON2))
 80004da:	2001      	movs	r0, #1
 80004dc:	f000 f9e6 	bl	80008ac <is_button_pressed_1s>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d00f      	beq.n	8000506 <fsm_for_input_processing_2+0x17e>
				button2_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80004e6:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <fsm_for_input_processing_2+0x188>)
 80004e8:	2202      	movs	r2, #2
 80004ea:	701a      	strb	r2, [r3, #0]
		break;
 80004ec:	e00b      	b.n	8000506 <fsm_for_input_processing_2+0x17e>
		if (!is_button_pressed (BUTTON2)) {
 80004ee:	2001      	movs	r0, #1
 80004f0:	f000 f9c2 	bl	8000878 <is_button_pressed>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d107      	bne.n	800050a <fsm_for_input_processing_2+0x182>
			button2_state = BUTTON_RELEASED;
 80004fa:	4b05      	ldr	r3, [pc, #20]	; (8000510 <fsm_for_input_processing_2+0x188>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]
		break;
 8000500:	e003      	b.n	800050a <fsm_for_input_processing_2+0x182>
		break;
 8000502:	bf00      	nop
 8000504:	e002      	b.n	800050c <fsm_for_input_processing_2+0x184>
		break;
 8000506:	bf00      	nop
 8000508:	e000      	b.n	800050c <fsm_for_input_processing_2+0x184>
		break;
 800050a:	bf00      	nop
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000095 	.word	0x20000095
 8000514:	20000098 	.word	0x20000098
 8000518:	2000009c 	.word	0x2000009c
 800051c:	cccccccd 	.word	0xcccccccd
 8000520:	2000009d 	.word	0x2000009d
 8000524:	2000009e 	.word	0x2000009e

08000528 <fsm_for_input_processing_3>:

void fsm_for_input_processing_3(void){
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	switch (button3_state){
 800052c:	4b66      	ldr	r3, [pc, #408]	; (80006c8 <fsm_for_input_processing_3+0x1a0>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b02      	cmp	r3, #2
 8000532:	f000 80b8 	beq.w	80006a6 <fsm_for_input_processing_3+0x17e>
 8000536:	2b02      	cmp	r3, #2
 8000538:	f300 80c4 	bgt.w	80006c4 <fsm_for_input_processing_3+0x19c>
 800053c:	2b00      	cmp	r3, #0
 800053e:	d003      	beq.n	8000548 <fsm_for_input_processing_3+0x20>
 8000540:	2b01      	cmp	r3, #1
 8000542:	f000 809c 	beq.w	800067e <fsm_for_input_processing_3+0x156>
		}
		// todo

		break;
	}
}
 8000546:	e0bd      	b.n	80006c4 <fsm_for_input_processing_3+0x19c>
		if(is_button_pressed(BUTTON3)){
 8000548:	2002      	movs	r0, #2
 800054a:	f000 f995 	bl	8000878 <is_button_pressed>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	f000 80b2 	beq.w	80006ba <fsm_for_input_processing_3+0x192>
			button3_state = BUTTON_PRESSED;
 8000556:	4b5c      	ldr	r3, [pc, #368]	; (80006c8 <fsm_for_input_processing_3+0x1a0>)
 8000558:	2201      	movs	r2, #1
 800055a:	701a      	strb	r2, [r3, #0]
			if (mode == 2){
 800055c:	4b5b      	ldr	r3, [pc, #364]	; (80006cc <fsm_for_input_processing_3+0x1a4>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b02      	cmp	r3, #2
 8000562:	d12b      	bne.n	80005bc <fsm_for_input_processing_3+0x94>
				if (red_temp == 0 || --red_temp < MIN_CNT) red_temp = MAX_CNT;
 8000564:	4b5a      	ldr	r3, [pc, #360]	; (80006d0 <fsm_for_input_processing_3+0x1a8>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d009      	beq.n	8000580 <fsm_for_input_processing_3+0x58>
 800056c:	4b58      	ldr	r3, [pc, #352]	; (80006d0 <fsm_for_input_processing_3+0x1a8>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	3b01      	subs	r3, #1
 8000572:	b2da      	uxtb	r2, r3
 8000574:	4b56      	ldr	r3, [pc, #344]	; (80006d0 <fsm_for_input_processing_3+0x1a8>)
 8000576:	701a      	strb	r2, [r3, #0]
 8000578:	4b55      	ldr	r3, [pc, #340]	; (80006d0 <fsm_for_input_processing_3+0x1a8>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d102      	bne.n	8000586 <fsm_for_input_processing_3+0x5e>
 8000580:	4b53      	ldr	r3, [pc, #332]	; (80006d0 <fsm_for_input_processing_3+0x1a8>)
 8000582:	2263      	movs	r2, #99	; 0x63
 8000584:	701a      	strb	r2, [r3, #0]
				UpdateBuffer_7SEG_LEDS(3, red_temp%10);
 8000586:	4b52      	ldr	r3, [pc, #328]	; (80006d0 <fsm_for_input_processing_3+0x1a8>)
 8000588:	781a      	ldrb	r2, [r3, #0]
 800058a:	4b52      	ldr	r3, [pc, #328]	; (80006d4 <fsm_for_input_processing_3+0x1ac>)
 800058c:	fba3 1302 	umull	r1, r3, r3, r2
 8000590:	08d9      	lsrs	r1, r3, #3
 8000592:	460b      	mov	r3, r1
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	440b      	add	r3, r1
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	b2db      	uxtb	r3, r3
 800059e:	4619      	mov	r1, r3
 80005a0:	2003      	movs	r0, #3
 80005a2:	f000 f99d 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				UpdateBuffer_7SEG_LEDS(2, red_temp/10);
 80005a6:	4b4a      	ldr	r3, [pc, #296]	; (80006d0 <fsm_for_input_processing_3+0x1a8>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	4a4a      	ldr	r2, [pc, #296]	; (80006d4 <fsm_for_input_processing_3+0x1ac>)
 80005ac:	fba2 2303 	umull	r2, r3, r2, r3
 80005b0:	08db      	lsrs	r3, r3, #3
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	4619      	mov	r1, r3
 80005b6:	2002      	movs	r0, #2
 80005b8:	f000 f992 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
			if (mode == 3){
 80005bc:	4b43      	ldr	r3, [pc, #268]	; (80006cc <fsm_for_input_processing_3+0x1a4>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b03      	cmp	r3, #3
 80005c2:	d12b      	bne.n	800061c <fsm_for_input_processing_3+0xf4>
				if (yel_temp == 0 || --yel_temp < MIN_CNT) yel_temp = MAX_CNT;
 80005c4:	4b44      	ldr	r3, [pc, #272]	; (80006d8 <fsm_for_input_processing_3+0x1b0>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d009      	beq.n	80005e0 <fsm_for_input_processing_3+0xb8>
 80005cc:	4b42      	ldr	r3, [pc, #264]	; (80006d8 <fsm_for_input_processing_3+0x1b0>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	3b01      	subs	r3, #1
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	4b40      	ldr	r3, [pc, #256]	; (80006d8 <fsm_for_input_processing_3+0x1b0>)
 80005d6:	701a      	strb	r2, [r3, #0]
 80005d8:	4b3f      	ldr	r3, [pc, #252]	; (80006d8 <fsm_for_input_processing_3+0x1b0>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d102      	bne.n	80005e6 <fsm_for_input_processing_3+0xbe>
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <fsm_for_input_processing_3+0x1b0>)
 80005e2:	2263      	movs	r2, #99	; 0x63
 80005e4:	701a      	strb	r2, [r3, #0]
				UpdateBuffer_7SEG_LEDS(3, yel_temp%10);
 80005e6:	4b3c      	ldr	r3, [pc, #240]	; (80006d8 <fsm_for_input_processing_3+0x1b0>)
 80005e8:	781a      	ldrb	r2, [r3, #0]
 80005ea:	4b3a      	ldr	r3, [pc, #232]	; (80006d4 <fsm_for_input_processing_3+0x1ac>)
 80005ec:	fba3 1302 	umull	r1, r3, r3, r2
 80005f0:	08d9      	lsrs	r1, r3, #3
 80005f2:	460b      	mov	r3, r1
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	440b      	add	r3, r1
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	4619      	mov	r1, r3
 8000600:	2003      	movs	r0, #3
 8000602:	f000 f96d 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				UpdateBuffer_7SEG_LEDS(2, yel_temp/10);
 8000606:	4b34      	ldr	r3, [pc, #208]	; (80006d8 <fsm_for_input_processing_3+0x1b0>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <fsm_for_input_processing_3+0x1ac>)
 800060c:	fba2 2303 	umull	r2, r3, r2, r3
 8000610:	08db      	lsrs	r3, r3, #3
 8000612:	b2db      	uxtb	r3, r3
 8000614:	4619      	mov	r1, r3
 8000616:	2002      	movs	r0, #2
 8000618:	f000 f962 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
			if (mode == 4){
 800061c:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <fsm_for_input_processing_3+0x1a4>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b04      	cmp	r3, #4
 8000622:	d14a      	bne.n	80006ba <fsm_for_input_processing_3+0x192>
				if (gre_temp == 0 || --gre_temp < MIN_CNT) gre_temp = MAX_CNT;
 8000624:	4b2d      	ldr	r3, [pc, #180]	; (80006dc <fsm_for_input_processing_3+0x1b4>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d009      	beq.n	8000640 <fsm_for_input_processing_3+0x118>
 800062c:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <fsm_for_input_processing_3+0x1b4>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	3b01      	subs	r3, #1
 8000632:	b2da      	uxtb	r2, r3
 8000634:	4b29      	ldr	r3, [pc, #164]	; (80006dc <fsm_for_input_processing_3+0x1b4>)
 8000636:	701a      	strb	r2, [r3, #0]
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <fsm_for_input_processing_3+0x1b4>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d102      	bne.n	8000646 <fsm_for_input_processing_3+0x11e>
 8000640:	4b26      	ldr	r3, [pc, #152]	; (80006dc <fsm_for_input_processing_3+0x1b4>)
 8000642:	2263      	movs	r2, #99	; 0x63
 8000644:	701a      	strb	r2, [r3, #0]
				UpdateBuffer_7SEG_LEDS(3, gre_temp%10);
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <fsm_for_input_processing_3+0x1b4>)
 8000648:	781a      	ldrb	r2, [r3, #0]
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <fsm_for_input_processing_3+0x1ac>)
 800064c:	fba3 1302 	umull	r1, r3, r3, r2
 8000650:	08d9      	lsrs	r1, r3, #3
 8000652:	460b      	mov	r3, r1
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	440b      	add	r3, r1
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	b2db      	uxtb	r3, r3
 800065e:	4619      	mov	r1, r3
 8000660:	2003      	movs	r0, #3
 8000662:	f000 f93d 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				UpdateBuffer_7SEG_LEDS(2, gre_temp/10);
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <fsm_for_input_processing_3+0x1b4>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	4a1a      	ldr	r2, [pc, #104]	; (80006d4 <fsm_for_input_processing_3+0x1ac>)
 800066c:	fba2 2303 	umull	r2, r3, r2, r3
 8000670:	08db      	lsrs	r3, r3, #3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	4619      	mov	r1, r3
 8000676:	2002      	movs	r0, #2
 8000678:	f000 f932 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
		break;
 800067c:	e01d      	b.n	80006ba <fsm_for_input_processing_3+0x192>
		if (!is_button_pressed(BUTTON3))
 800067e:	2002      	movs	r0, #2
 8000680:	f000 f8fa 	bl	8000878 <is_button_pressed>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d103      	bne.n	8000692 <fsm_for_input_processing_3+0x16a>
			button3_state = BUTTON_RELEASED;
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <fsm_for_input_processing_3+0x1a0>)
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
		break;
 8000690:	e015      	b.n	80006be <fsm_for_input_processing_3+0x196>
			if(is_button_pressed_1s(BUTTON3))
 8000692:	2002      	movs	r0, #2
 8000694:	f000 f90a 	bl	80008ac <is_button_pressed_1s>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d00f      	beq.n	80006be <fsm_for_input_processing_3+0x196>
				button3_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <fsm_for_input_processing_3+0x1a0>)
 80006a0:	2202      	movs	r2, #2
 80006a2:	701a      	strb	r2, [r3, #0]
		break;
 80006a4:	e00b      	b.n	80006be <fsm_for_input_processing_3+0x196>
		if (!is_button_pressed (BUTTON3)) {
 80006a6:	2002      	movs	r0, #2
 80006a8:	f000 f8e6 	bl	8000878 <is_button_pressed>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d107      	bne.n	80006c2 <fsm_for_input_processing_3+0x19a>
			button3_state = BUTTON_RELEASED;
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <fsm_for_input_processing_3+0x1a0>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
		break;
 80006b8:	e003      	b.n	80006c2 <fsm_for_input_processing_3+0x19a>
		break;
 80006ba:	bf00      	nop
 80006bc:	e002      	b.n	80006c4 <fsm_for_input_processing_3+0x19c>
		break;
 80006be:	bf00      	nop
 80006c0:	e000      	b.n	80006c4 <fsm_for_input_processing_3+0x19c>
		break;
 80006c2:	bf00      	nop
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000096 	.word	0x20000096
 80006cc:	20000098 	.word	0x20000098
 80006d0:	2000009c 	.word	0x2000009c
 80006d4:	cccccccd 	.word	0xcccccccd
 80006d8:	2000009d 	.word	0x2000009d
 80006dc:	2000009e 	.word	0x2000009e

080006e0 <fsm_for_input_processing_4>:

void fsm_for_input_processing_4(void){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	switch (button4_state){
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <fsm_for_input_processing_4+0xa8>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	d03c      	beq.n	8000766 <fsm_for_input_processing_4+0x86>
 80006ec:	2b02      	cmp	r3, #2
 80006ee:	dc49      	bgt.n	8000784 <fsm_for_input_processing_4+0xa4>
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d002      	beq.n	80006fa <fsm_for_input_processing_4+0x1a>
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d022      	beq.n	800073e <fsm_for_input_processing_4+0x5e>
		}
		// todo

		break;
	}
}
 80006f8:	e044      	b.n	8000784 <fsm_for_input_processing_4+0xa4>
		if(is_button_pressed(BUTTON4)){
 80006fa:	2003      	movs	r0, #3
 80006fc:	f000 f8bc 	bl	8000878 <is_button_pressed>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d039      	beq.n	800077a <fsm_for_input_processing_4+0x9a>
			button4_state = BUTTON_PRESSED;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <fsm_for_input_processing_4+0xa8>)
 8000708:	2201      	movs	r2, #1
 800070a:	701a      	strb	r2, [r3, #0]
			if (mode == 2){
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <fsm_for_input_processing_4+0xac>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b02      	cmp	r3, #2
 8000712:	d103      	bne.n	800071c <fsm_for_input_processing_4+0x3c>
				red_cnt = red_temp;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <fsm_for_input_processing_4+0xb0>)
 8000716:	781a      	ldrb	r2, [r3, #0]
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <fsm_for_input_processing_4+0xb4>)
 800071a:	701a      	strb	r2, [r3, #0]
			if (mode == 3){
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <fsm_for_input_processing_4+0xac>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b03      	cmp	r3, #3
 8000722:	d103      	bne.n	800072c <fsm_for_input_processing_4+0x4c>
				yel_cnt = yel_temp;
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <fsm_for_input_processing_4+0xb8>)
 8000726:	781a      	ldrb	r2, [r3, #0]
 8000728:	4b1c      	ldr	r3, [pc, #112]	; (800079c <fsm_for_input_processing_4+0xbc>)
 800072a:	701a      	strb	r2, [r3, #0]
			if (mode == 4){
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <fsm_for_input_processing_4+0xac>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b04      	cmp	r3, #4
 8000732:	d122      	bne.n	800077a <fsm_for_input_processing_4+0x9a>
				gre_cnt = gre_temp;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <fsm_for_input_processing_4+0xc0>)
 8000736:	781a      	ldrb	r2, [r3, #0]
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <fsm_for_input_processing_4+0xc4>)
 800073a:	701a      	strb	r2, [r3, #0]
		break;
 800073c:	e01d      	b.n	800077a <fsm_for_input_processing_4+0x9a>
		if (!is_button_pressed(BUTTON4))
 800073e:	2003      	movs	r0, #3
 8000740:	f000 f89a 	bl	8000878 <is_button_pressed>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d103      	bne.n	8000752 <fsm_for_input_processing_4+0x72>
			button4_state = BUTTON_RELEASED;
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <fsm_for_input_processing_4+0xa8>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
		break;
 8000750:	e015      	b.n	800077e <fsm_for_input_processing_4+0x9e>
			if(is_button_pressed_1s(BUTTON4))
 8000752:	2003      	movs	r0, #3
 8000754:	f000 f8aa 	bl	80008ac <is_button_pressed_1s>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d00f      	beq.n	800077e <fsm_for_input_processing_4+0x9e>
				button4_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <fsm_for_input_processing_4+0xa8>)
 8000760:	2202      	movs	r2, #2
 8000762:	701a      	strb	r2, [r3, #0]
		break;
 8000764:	e00b      	b.n	800077e <fsm_for_input_processing_4+0x9e>
		if (!is_button_pressed (BUTTON4)) {
 8000766:	2003      	movs	r0, #3
 8000768:	f000 f886 	bl	8000878 <is_button_pressed>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d107      	bne.n	8000782 <fsm_for_input_processing_4+0xa2>
			button4_state = BUTTON_RELEASED;
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <fsm_for_input_processing_4+0xa8>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
		break;
 8000778:	e003      	b.n	8000782 <fsm_for_input_processing_4+0xa2>
		break;
 800077a:	bf00      	nop
 800077c:	e002      	b.n	8000784 <fsm_for_input_processing_4+0xa4>
		break;
 800077e:	bf00      	nop
 8000780:	e000      	b.n	8000784 <fsm_for_input_processing_4+0xa4>
		break;
 8000782:	bf00      	nop
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000097 	.word	0x20000097
 800078c:	20000098 	.word	0x20000098
 8000790:	2000009c 	.word	0x2000009c
 8000794:	20000099 	.word	0x20000099
 8000798:	2000009d 	.word	0x2000009d
 800079c:	2000009a 	.word	0x2000009a
 80007a0:	2000009e 	.word	0x2000009e
 80007a4:	2000009b 	.word	0x2000009b

080007a8 <button_reading>:
		BUT_2_GPIO_Port,
		BUT_3_GPIO_Port,
		BUT_4_GPIO_Port,
};

void button_reading (void){
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 80007ae:	2300      	movs	r3, #0
 80007b0:	71fb      	strb	r3, [r7, #7]
 80007b2:	e04a      	b.n	800084a <button_reading+0xa2>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80007b4:	79fa      	ldrb	r2, [r7, #7]
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	4928      	ldr	r1, [pc, #160]	; (800085c <button_reading+0xb4>)
 80007ba:	5c89      	ldrb	r1, [r1, r2]
 80007bc:	4a28      	ldr	r2, [pc, #160]	; (8000860 <button_reading+0xb8>)
 80007be:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(ControlPort_BUTTONS[i], ControlPin_BUTTONS[i]);
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	4a28      	ldr	r2, [pc, #160]	; (8000864 <button_reading+0xbc>)
 80007c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	4927      	ldr	r1, [pc, #156]	; (8000868 <button_reading+0xc0>)
 80007cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007d0:	79fc      	ldrb	r4, [r7, #7]
 80007d2:	4619      	mov	r1, r3
 80007d4:	4610      	mov	r0, r2
 80007d6:	f001 f95d 	bl	8001a94 <HAL_GPIO_ReadPin>
 80007da:	4603      	mov	r3, r0
 80007dc:	461a      	mov	r2, r3
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <button_reading+0xb4>)
 80007e0:	551a      	strb	r2, [r3, r4]
		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	4a1d      	ldr	r2, [pc, #116]	; (800085c <button_reading+0xb4>)
 80007e6:	5cd2      	ldrb	r2, [r2, r3]
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	491d      	ldr	r1, [pc, #116]	; (8000860 <button_reading+0xb8>)
 80007ec:	5ccb      	ldrb	r3, [r1, r3]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d128      	bne.n	8000844 <button_reading+0x9c>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80007f2:	79fa      	ldrb	r2, [r7, #7]
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	4919      	ldr	r1, [pc, #100]	; (800085c <button_reading+0xb4>)
 80007f8:	5c89      	ldrb	r1, [r1, r2]
 80007fa:	4a1c      	ldr	r2, [pc, #112]	; (800086c <button_reading+0xc4>)
 80007fc:	54d1      	strb	r1, [r2, r3]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED){
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	4a1a      	ldr	r2, [pc, #104]	; (800086c <button_reading+0xc4>)
 8000802:	5cd3      	ldrb	r3, [r2, r3]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d114      	bne.n	8000832 <button_reading+0x8a>
				if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	4a19      	ldr	r2, [pc, #100]	; (8000870 <button_reading+0xc8>)
 800080c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000810:	2b63      	cmp	r3, #99	; 0x63
 8000812:	d809      	bhi.n	8000828 <button_reading+0x80>
					counterForButtonPress1s[i]++;
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4a16      	ldr	r2, [pc, #88]	; (8000870 <button_reading+0xc8>)
 8000818:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800081c:	3201      	adds	r2, #1
 800081e:	b291      	uxth	r1, r2
 8000820:	4a13      	ldr	r2, [pc, #76]	; (8000870 <button_reading+0xc8>)
 8000822:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000826:	e00d      	b.n	8000844 <button_reading+0x9c>
				}
				else {
					flagForButtonPress1s[i] = 1;
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	4a12      	ldr	r2, [pc, #72]	; (8000874 <button_reading+0xcc>)
 800082c:	2101      	movs	r1, #1
 800082e:	54d1      	strb	r1, [r2, r3]
 8000830:	e008      	b.n	8000844 <button_reading+0x9c>
				}
			}
			else {
				counterForButtonPress1s[i] = 0;
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <button_reading+0xc8>)
 8000836:	2100      	movs	r1, #0
 8000838:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <button_reading+0xcc>)
 8000840:	2100      	movs	r1, #0
 8000842:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	3301      	adds	r3, #1
 8000848:	71fb      	strb	r3, [r7, #7]
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b03      	cmp	r3, #3
 800084e:	d9b1      	bls.n	80007b4 <button_reading+0xc>
			}
		}
	}
}
 8000850:	bf00      	nop
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	bd90      	pop	{r4, r7, pc}
 800085a:	bf00      	nop
 800085c:	200000a4 	.word	0x200000a4
 8000860:	200000a8 	.word	0x200000a8
 8000864:	20000008 	.word	0x20000008
 8000868:	20000000 	.word	0x20000000
 800086c:	200000a0 	.word	0x200000a0
 8000870:	200000b0 	.word	0x200000b0
 8000874:	200000ac 	.word	0x200000ac

08000878 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
	if (index >= NUMBER_OF_BUTTONS)
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b03      	cmp	r3, #3
 8000886:	d901      	bls.n	800088c <is_button_pressed+0x14>
		return 0;
 8000888:	2300      	movs	r3, #0
 800088a:	e007      	b.n	800089c <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	4a06      	ldr	r2, [pc, #24]	; (80008a8 <is_button_pressed+0x30>)
 8000890:	5cd3      	ldrb	r3, [r2, r3]
 8000892:	2b00      	cmp	r3, #0
 8000894:	bf0c      	ite	eq
 8000896:	2301      	moveq	r3, #1
 8000898:	2300      	movne	r3, #0
 800089a:	b2db      	uxtb	r3, r3
}
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	200000a0 	.word	0x200000a0

080008ac <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	if (index >= NUMBER_OF_BUTTONS)
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d901      	bls.n	80008c0 <is_button_pressed_1s+0x14>
		return 0xff;
 80008bc:	23ff      	movs	r3, #255	; 0xff
 80008be:	e007      	b.n	80008d0 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	4a06      	ldr	r2, [pc, #24]	; (80008dc <is_button_pressed_1s+0x30>)
 80008c4:	5cd3      	ldrb	r3, [r2, r3]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	bf0c      	ite	eq
 80008ca:	2301      	moveq	r3, #1
 80008cc:	2300      	movne	r3, #0
 80008ce:	b2db      	uxtb	r3, r3
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	200000ac 	.word	0x200000ac

080008e0 <UpdateBuffer_7SEG_LEDS>:
		SEG_E_GPIO_Port,
		SEG_F_GPIO_Port,
		SEG_G_GPIO_Port,
};

void UpdateBuffer_7SEG_LEDS(uint8_t idx, uint8_t val){
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	460a      	mov	r2, r1
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	4613      	mov	r3, r2
 80008ee:	71bb      	strb	r3, [r7, #6]
	if(idx >= NUMBER_OF_7SEG_LEDS) return;
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	2b03      	cmp	r3, #3
 80008f4:	d807      	bhi.n	8000906 <UpdateBuffer_7SEG_LEDS+0x26>
	if(val > NUMBER_OF_DECIMAL_DIGITS) return;
 80008f6:	79bb      	ldrb	r3, [r7, #6]
 80008f8:	2b0a      	cmp	r3, #10
 80008fa:	d806      	bhi.n	800090a <UpdateBuffer_7SEG_LEDS+0x2a>
	Buffer_7SEG_LEDS[idx] = val;
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	4905      	ldr	r1, [pc, #20]	; (8000914 <UpdateBuffer_7SEG_LEDS+0x34>)
 8000900:	79ba      	ldrb	r2, [r7, #6]
 8000902:	54ca      	strb	r2, [r1, r3]
 8000904:	e002      	b.n	800090c <UpdateBuffer_7SEG_LEDS+0x2c>
	if(idx >= NUMBER_OF_7SEG_LEDS) return;
 8000906:	bf00      	nop
 8000908:	e000      	b.n	800090c <UpdateBuffer_7SEG_LEDS+0x2c>
	if(val > NUMBER_OF_DECIMAL_DIGITS) return;
 800090a:	bf00      	nop
}
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	200000b8 	.word	0x200000b8

08000918 <ClearPrevious_7SEG_LEDS>:

void ClearPrevious_7SEG_LEDS(uint8_t index){
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
	if(index >= NUMBER_OF_7SEG_LEDS) return;
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	2b03      	cmp	r3, #3
 8000926:	d80c      	bhi.n	8000942 <ClearPrevious_7SEG_LEDS+0x2a>
	HAL_GPIO_WritePin(ControlPort_7SEG_LEDs[index], ControlPin_7SEG_LEDs[index], 1);
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <ClearPrevious_7SEG_LEDS+0x34>)
 800092c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	4a07      	ldr	r2, [pc, #28]	; (8000950 <ClearPrevious_7SEG_LEDS+0x38>)
 8000934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000938:	2201      	movs	r2, #1
 800093a:	4619      	mov	r1, r3
 800093c:	f001 f8c1 	bl	8001ac2 <HAL_GPIO_WritePin>
 8000940:	e000      	b.n	8000944 <ClearPrevious_7SEG_LEDS+0x2c>
	if(index >= NUMBER_OF_7SEG_LEDS) return;
 8000942:	bf00      	nop
}
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000002c 	.word	0x2000002c
 8000950:	20000024 	.word	0x20000024

08000954 <Display_7SEG_DATA>:

void Display_7SEG_DATA(uint8_t val){
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	uint8_t idx;
	for(idx = 0; idx < 7; idx++){
 800095e:	2300      	movs	r3, #0
 8000960:	73fb      	strb	r3, [r7, #15]
 8000962:	e023      	b.n	80009ac <Display_7SEG_DATA+0x58>
		if((val>>idx) & 0x01){
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	fa42 f303 	asr.w	r3, r2, r3
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	2b00      	cmp	r3, #0
 8000972:	d00c      	beq.n	800098e <Display_7SEG_DATA+0x3a>
			HAL_GPIO_WritePin(DataPort_7SEG_LEDS[idx], DataPin_7SEG_LEDS[idx], 0);
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	4a11      	ldr	r2, [pc, #68]	; (80009bc <Display_7SEG_DATA+0x68>)
 8000978:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	4a10      	ldr	r2, [pc, #64]	; (80009c0 <Display_7SEG_DATA+0x6c>)
 8000980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000984:	2200      	movs	r2, #0
 8000986:	4619      	mov	r1, r3
 8000988:	f001 f89b 	bl	8001ac2 <HAL_GPIO_WritePin>
 800098c:	e00b      	b.n	80009a6 <Display_7SEG_DATA+0x52>
		} else {
			HAL_GPIO_WritePin(DataPort_7SEG_LEDS[idx], DataPin_7SEG_LEDS[idx], 1);
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <Display_7SEG_DATA+0x68>)
 8000992:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000996:	7bfb      	ldrb	r3, [r7, #15]
 8000998:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <Display_7SEG_DATA+0x6c>)
 800099a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800099e:	2201      	movs	r2, #1
 80009a0:	4619      	mov	r1, r3
 80009a2:	f001 f88e 	bl	8001ac2 <HAL_GPIO_WritePin>
	for(idx = 0; idx < 7; idx++){
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	3301      	adds	r3, #1
 80009aa:	73fb      	strb	r3, [r7, #15]
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	2b06      	cmp	r3, #6
 80009b0:	d9d8      	bls.n	8000964 <Display_7SEG_DATA+0x10>
		}
	}
}
 80009b2:	bf00      	nop
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2000004c 	.word	0x2000004c
 80009c0:	2000003c 	.word	0x2000003c

080009c4 <SetCurrent_7SEG_LEDS>:

void SetCurrent_7SEG_LEDS(uint8_t index){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
	if(index >= NUMBER_OF_7SEG_LEDS) return;
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b03      	cmp	r3, #3
 80009d2:	d80c      	bhi.n	80009ee <SetCurrent_7SEG_LEDS+0x2a>
	HAL_GPIO_WritePin(ControlPort_7SEG_LEDs[index], ControlPin_7SEG_LEDs[index], 0);
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <SetCurrent_7SEG_LEDS+0x34>)
 80009d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	4a07      	ldr	r2, [pc, #28]	; (80009fc <SetCurrent_7SEG_LEDS+0x38>)
 80009e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009e4:	2200      	movs	r2, #0
 80009e6:	4619      	mov	r1, r3
 80009e8:	f001 f86b 	bl	8001ac2 <HAL_GPIO_WritePin>
 80009ec:	e000      	b.n	80009f0 <SetCurrent_7SEG_LEDS+0x2c>
	if(index >= NUMBER_OF_7SEG_LEDS) return;
 80009ee:	bf00      	nop
}
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000002c 	.word	0x2000002c
 80009fc:	20000024 	.word	0x20000024

08000a00 <Driver_7SEG_LEDS>:

void Driver_7SEG_LEDS(void){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	static uint8_t ledIndex = 0;
	ClearPrevious_7SEG_LEDS(ledIndex);
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <Driver_7SEG_LEDS+0x4c>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff85 	bl	8000918 <ClearPrevious_7SEG_LEDS>
	ledIndex = (ledIndex + 1)%NUMBER_OF_7SEG_LEDS;
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <Driver_7SEG_LEDS+0x4c>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	3301      	adds	r3, #1
 8000a14:	425a      	negs	r2, r3
 8000a16:	f003 0303 	and.w	r3, r3, #3
 8000a1a:	f002 0203 	and.w	r2, r2, #3
 8000a1e:	bf58      	it	pl
 8000a20:	4253      	negpl	r3, r2
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <Driver_7SEG_LEDS+0x4c>)
 8000a26:	701a      	strb	r2, [r3, #0]
	Display_7SEG_DATA(Conversion_7SEG_LEDS[Buffer_7SEG_LEDS[ledIndex]]);
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <Driver_7SEG_LEDS+0x4c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <Driver_7SEG_LEDS+0x50>)
 8000a30:	5c9b      	ldrb	r3, [r3, r2]
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <Driver_7SEG_LEDS+0x54>)
 8000a36:	5c9b      	ldrb	r3, [r3, r2]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff8b 	bl	8000954 <Display_7SEG_DATA>
	SetCurrent_7SEG_LEDS(ledIndex);
 8000a3e:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <Driver_7SEG_LEDS+0x4c>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ffbe 	bl	80009c4 <SetCurrent_7SEG_LEDS>
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200000bc 	.word	0x200000bc
 8000a50:	200000b8 	.word	0x200000b8
 8000a54:	20000018 	.word	0x20000018

08000a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5c:	f000 fd30 	bl	80014c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a60:	f000 f88a 	bl	8000b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000a64:	f000 f8c4 	bl	8000bf0 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000a68:	f000 f90e 	bl	8000c88 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // init counter
  mode1_sw = 0;
 8000a6c:	4b3c      	ldr	r3, [pc, #240]	; (8000b60 <main+0x108>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
  red_cnt = 0;
 8000a72:	4b3c      	ldr	r3, [pc, #240]	; (8000b64 <main+0x10c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
  yel_cnt = 0;
 8000a78:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <main+0x110>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
  gre_cnt = 0;
 8000a7e:	4b3b      	ldr	r3, [pc, #236]	; (8000b6c <main+0x114>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
  // init traffic light
  traffic_light_init();
 8000a84:	f000 fa58 	bl	8000f38 <traffic_light_init>
  // init 7seg
  UpdateBuffer_7SEG_LEDS(0, 0);
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f7ff ff28 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
  UpdateBuffer_7SEG_LEDS(1, 0);
 8000a90:	2100      	movs	r1, #0
 8000a92:	2001      	movs	r0, #1
 8000a94:	f7ff ff24 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
  UpdateBuffer_7SEG_LEDS(2, 0);
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	f7ff ff20 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
  UpdateBuffer_7SEG_LEDS(3, 0);
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2003      	movs	r0, #3
 8000aa4:	f7ff ff1c 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
  // set timer
  HAL_TIM_Base_Start_IT(&htim2);
 8000aa8:	4831      	ldr	r0, [pc, #196]	; (8000b70 <main+0x118>)
 8000aaa:	f001 fc5b 	bl	8002364 <HAL_TIM_Base_Start_IT>
  timer_set(0, 10);
 8000aae:	210a      	movs	r1, #10
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f000 f9df 	bl	8000e74 <timer_set>
  timer_set(1, 10);
 8000ab6:	210a      	movs	r1, #10
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f000 f9db 	bl	8000e74 <timer_set>
  timer_set(2, 10);
 8000abe:	210a      	movs	r1, #10
 8000ac0:	2002      	movs	r0, #2
 8000ac2:	f000 f9d7 	bl	8000e74 <timer_set>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_for_input_processing_1();
 8000ac6:	f7ff fb69 	bl	800019c <fsm_for_input_processing_1>
	  fsm_for_input_processing_2();
 8000aca:	f7ff fc5d 	bl	8000388 <fsm_for_input_processing_2>
	  fsm_for_input_processing_3();
 8000ace:	f7ff fd2b 	bl	8000528 <fsm_for_input_processing_3>
	  fsm_for_input_processing_4();
 8000ad2:	f7ff fe05 	bl	80006e0 <fsm_for_input_processing_4>

	  mode1_sw = mode1_sw_updating();
 8000ad6:	f7ff fb57 	bl	8000188 <mode1_sw_updating>
 8000ada:	4603      	mov	r3, r0
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <main+0x108>)
 8000ae0:	701a      	strb	r2, [r3, #0]
	  if (mode1_sw == 1){
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <main+0x108>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d12f      	bne.n	8000b4a <main+0xf2>
		  red_cnt = red_updating();
 8000aea:	f7ff fb2f 	bl	800014c <red_updating>
 8000aee:	4603      	mov	r3, r0
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <main+0x10c>)
 8000af4:	701a      	strb	r2, [r3, #0]
		  yel_cnt = yel_updating();
 8000af6:	f7ff fb33 	bl	8000160 <yel_updating>
 8000afa:	4603      	mov	r3, r0
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <main+0x110>)
 8000b00:	701a      	strb	r2, [r3, #0]
		  gre_cnt = gre_updating();
 8000b02:	f7ff fb37 	bl	8000174 <gre_updating>
 8000b06:	4603      	mov	r3, r0
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <main+0x114>)
 8000b0c:	701a      	strb	r2, [r3, #0]
		  if (timer_flag[1] == 1){
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <main+0x11c>)
 8000b10:	785b      	ldrb	r3, [r3, #1]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d119      	bne.n	8000b4a <main+0xf2>
			  traffic_light_update1(red_cnt, yel_cnt, gre_cnt);
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <main+0x10c>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <main+0x110>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <main+0x114>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	f000 fa2e 	bl	8000f88 <traffic_light_update1>
			  traffic_light_update2(red_cnt, yel_cnt, gre_cnt);
 8000b2c:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <main+0x10c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <main+0x110>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	4619      	mov	r1, r3
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <main+0x114>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	f000 fb55 	bl	80011ec <traffic_light_update2>
			  timer_set(1, 200);
 8000b42:	21c8      	movs	r1, #200	; 0xc8
 8000b44:	2001      	movs	r0, #1
 8000b46:	f000 f995 	bl	8000e74 <timer_set>
		  }
	  }

	  if (timer_flag[0] == 1) {
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <main+0x11c>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d1b9      	bne.n	8000ac6 <main+0x6e>
	  	  Driver_7SEG_LEDS();
 8000b52:	f7ff ff55 	bl	8000a00 <Driver_7SEG_LEDS>
	  	  timer_set(0, 50);
 8000b56:	2132      	movs	r1, #50	; 0x32
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f000 f98b 	bl	8000e74 <timer_set>
	  fsm_for_input_processing_1();
 8000b5e:	e7b2      	b.n	8000ac6 <main+0x6e>
 8000b60:	2000009f 	.word	0x2000009f
 8000b64:	20000099 	.word	0x20000099
 8000b68:	2000009a 	.word	0x2000009a
 8000b6c:	2000009b 	.word	0x2000009b
 8000b70:	200000d8 	.word	0x200000d8
 8000b74:	200000d4 	.word	0x200000d4

08000b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b090      	sub	sp, #64	; 0x40
 8000b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7e:	f107 0318 	add.w	r3, r7, #24
 8000b82:	2228      	movs	r2, #40	; 0x28
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 ffa4 	bl	8002ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba2:	2310      	movs	r3, #16
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000baa:	f107 0318 	add.w	r3, r7, #24
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 ffa0 	bl	8001af4 <HAL_RCC_OscConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000bba:	f000 f8c7 	bl	8000d4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbe:	230f      	movs	r3, #15
 8000bc0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 fa0c 	bl	8001ff4 <HAL_RCC_ClockConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000be2:	f000 f8b3 	bl	8000d4c <Error_Handler>
  }
}
 8000be6:	bf00      	nop
 8000be8:	3740      	adds	r7, #64	; 0x40
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c04:	463b      	mov	r3, r7
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_TIM2_Init+0x94>)
 8000c0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_TIM2_Init+0x94>)
 8000c16:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_TIM2_Init+0x94>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_TIM2_Init+0x94>)
 8000c24:	2209      	movs	r2, #9
 8000c26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c28:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_TIM2_Init+0x94>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_TIM2_Init+0x94>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c34:	4813      	ldr	r0, [pc, #76]	; (8000c84 <MX_TIM2_Init+0x94>)
 8000c36:	f001 fb45 	bl	80022c4 <HAL_TIM_Base_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c40:	f000 f884 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c4a:	f107 0308 	add.w	r3, r7, #8
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <MX_TIM2_Init+0x94>)
 8000c52:	f001 fcdb 	bl	800260c <HAL_TIM_ConfigClockSource>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c5c:	f000 f876 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c60:	2300      	movs	r3, #0
 8000c62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c68:	463b      	mov	r3, r7
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_TIM2_Init+0x94>)
 8000c6e:	f001 fea3 	bl	80029b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c78:	f000 f868 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200000d8 	.word	0x200000d8

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 0308 	add.w	r3, r7, #8
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9c:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <MX_GPIO_Init+0xb8>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a27      	ldr	r2, [pc, #156]	; (8000d40 <MX_GPIO_Init+0xb8>)
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <MX_GPIO_Init+0xb8>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f003 0304 	and.w	r3, r3, #4
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb4:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <MX_GPIO_Init+0xb8>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a21      	ldr	r2, [pc, #132]	; (8000d40 <MX_GPIO_Init+0xb8>)
 8000cba:	f043 0308 	orr.w	r3, r3, #8
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <MX_GPIO_Init+0xb8>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0308 	and.w	r3, r3, #8
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_1_Pin|YEL_1_Pin|GRE_1_Pin|RED_2_Pin
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000cd2:	481c      	ldr	r0, [pc, #112]	; (8000d44 <MX_GPIO_Init+0xbc>)
 8000cd4:	f000 fef5 	bl	8001ac2 <HAL_GPIO_WritePin>
                          |YEL_2_Pin|GRE_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_B_Pin|SEG_C_Pin|SEG_D_Pin|SEG_E_Pin
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f64f 61f0 	movw	r1, #65264	; 0xfef0
 8000cde:	481a      	ldr	r0, [pc, #104]	; (8000d48 <MX_GPIO_Init+0xc0>)
 8000ce0:	f000 feef 	bl	8001ac2 <HAL_GPIO_WritePin>
                          |SEG_F_Pin|SEG_G_Pin|LED_1_Pin|LED_2_Pin
                          |LED_3_Pin|LED_4_Pin|SEG_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUT_1_Pin BUT_2_Pin BUT_3_Pin BUT_4_Pin */
  GPIO_InitStruct.Pin = BUT_1_Pin|BUT_2_Pin|BUT_3_Pin|BUT_4_Pin;
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	f107 0308 	add.w	r3, r7, #8
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4813      	ldr	r0, [pc, #76]	; (8000d44 <MX_GPIO_Init+0xbc>)
 8000cf8:	f000 fd52 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_1_Pin YEL_1_Pin GRE_1_Pin RED_2_Pin
                           YEL_2_Pin GRE_2_Pin */
  GPIO_InitStruct.Pin = RED_1_Pin|YEL_1_Pin|GRE_1_Pin|RED_2_Pin
 8000cfc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000d00:	60bb      	str	r3, [r7, #8]
                          |YEL_2_Pin|GRE_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	2301      	movs	r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	4619      	mov	r1, r3
 8000d14:	480b      	ldr	r0, [pc, #44]	; (8000d44 <MX_GPIO_Init+0xbc>)
 8000d16:	f000 fd43 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_B_Pin SEG_C_Pin SEG_D_Pin SEG_E_Pin
                           SEG_F_Pin SEG_G_Pin LED_1_Pin LED_2_Pin
                           LED_3_Pin LED_4_Pin SEG_A_Pin */
  GPIO_InitStruct.Pin = SEG_B_Pin|SEG_C_Pin|SEG_D_Pin|SEG_E_Pin
 8000d1a:	f64f 63f0 	movw	r3, #65264	; 0xfef0
 8000d1e:	60bb      	str	r3, [r7, #8]
                          |SEG_F_Pin|SEG_G_Pin|LED_1_Pin|LED_2_Pin
                          |LED_3_Pin|LED_4_Pin|SEG_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	4619      	mov	r1, r3
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_GPIO_Init+0xc0>)
 8000d34:	f000 fd34 	bl	80017a0 <HAL_GPIO_Init>

}
 8000d38:	bf00      	nop
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010800 	.word	0x40010800
 8000d48:	40010c00 	.word	0x40010c00

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <Error_Handler+0x8>
	...

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_MspInit+0x5c>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <HAL_MspInit+0x5c>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6193      	str	r3, [r2, #24]
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_MspInit+0x5c>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <HAL_MspInit+0x5c>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <HAL_MspInit+0x5c>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	61d3      	str	r3, [r2, #28]
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <HAL_MspInit+0x5c>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_MspInit+0x60>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <HAL_MspInit+0x60>)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010000 	.word	0x40010000

08000dbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dcc:	d113      	bne.n	8000df6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <HAL_TIM_Base_MspInit+0x44>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <HAL_TIM_Base_MspInit+0x44>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	61d3      	str	r3, [r2, #28]
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_TIM_Base_MspInit+0x44>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	201c      	movs	r0, #28
 8000dec:	f000 fca1 	bl	8001732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000df0:	201c      	movs	r0, #28
 8000df2:	f000 fcba 	bl	800176a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <NMI_Handler+0x4>

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <MemManage_Handler+0x4>

08000e16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr

08000e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr

08000e46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4a:	f000 fb7f 	bl	800154c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <TIM2_IRQHandler+0x10>)
 8000e5a:	f001 facf 	bl	80023fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200000d8 	.word	0x200000d8

08000e68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <timer_set>:

#include "main.h"
#include "timer.h"
#include "input_reading.h"

void timer_set(uint8_t idx, uint32_t duration){
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
	if (idx >= NUMBER_OF_TIMER) return;
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d80d      	bhi.n	8000ea2 <timer_set+0x2e>
	timer_counter[idx] = duration/TIMER_CYCLE;
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <timer_set+0x38>)
 8000e8c:	fba1 1202 	umull	r1, r2, r1, r2
 8000e90:	08d2      	lsrs	r2, r2, #3
 8000e92:	4907      	ldr	r1, [pc, #28]	; (8000eb0 <timer_set+0x3c>)
 8000e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[idx] = 0;
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <timer_set+0x40>)
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	54d1      	strb	r1, [r2, r3]
 8000ea0:	e000      	b.n	8000ea4 <timer_set+0x30>
	if (idx >= NUMBER_OF_TIMER) return;
 8000ea2:	bf00      	nop
}
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	cccccccd 	.word	0xcccccccd
 8000eb0:	200000c8 	.word	0x200000c8
 8000eb4:	200000d4 	.word	0x200000d4

08000eb8 <timer_run>:

void timer_run(void){
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUMBER_OF_TIMER; i++){
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	e01a      	b.n	8000efa <timer_run+0x42>
		if (timer_counter[i] > 0){
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	4a11      	ldr	r2, [pc, #68]	; (8000f0c <timer_run+0x54>)
 8000ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d011      	beq.n	8000ef4 <timer_run+0x3c>
			timer_counter[i]--;
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <timer_run+0x54>)
 8000ed4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ed8:	3a01      	subs	r2, #1
 8000eda:	490c      	ldr	r1, [pc, #48]	; (8000f0c <timer_run+0x54>)
 8000edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] == 0) timer_flag[i] = 1;
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <timer_run+0x54>)
 8000ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d103      	bne.n	8000ef4 <timer_run+0x3c>
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <timer_run+0x58>)
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NUMBER_OF_TIMER; i++){
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	71fb      	strb	r3, [r7, #7]
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d9e1      	bls.n	8000ec4 <timer_run+0xc>
		}
	}
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	200000c8 	.word	0x200000c8
 8000f10:	200000d4 	.word	0x200000d4

08000f14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f24:	d103      	bne.n	8000f2e <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8000f26:	f7ff fc3f 	bl	80007a8 <button_reading>
		timer_run();
 8000f2a:	f7ff ffc5 	bl	8000eb8 <timer_run>
	}
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <traffic_light_init>:

enum LightState {RED, YEL, GRE};
enum LightState lightstate_v = RED;
enum LightState	lightstate_h = GRE;

void traffic_light_init(void){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 1);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2120      	movs	r1, #32
 8000f40:	4810      	ldr	r0, [pc, #64]	; (8000f84 <traffic_light_init+0x4c>)
 8000f42:	f000 fdbe 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_1_GPIO_Port, YEL_1_Pin, 1);
 8000f46:	2201      	movs	r2, #1
 8000f48:	2140      	movs	r1, #64	; 0x40
 8000f4a:	480e      	ldr	r0, [pc, #56]	; (8000f84 <traffic_light_init+0x4c>)
 8000f4c:	f000 fdb9 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRE_1_GPIO_Port, GRE_1_Pin, 1);
 8000f50:	2201      	movs	r2, #1
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	480b      	ldr	r0, [pc, #44]	; (8000f84 <traffic_light_init+0x4c>)
 8000f56:	f000 fdb4 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 1);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f60:	4808      	ldr	r0, [pc, #32]	; (8000f84 <traffic_light_init+0x4c>)
 8000f62:	f000 fdae 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_2_GPIO_Port, YEL_2_Pin, 1);
 8000f66:	2201      	movs	r2, #1
 8000f68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <traffic_light_init+0x4c>)
 8000f6e:	f000 fda8 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRE_2_GPIO_Port, GRE_2_Pin, 1);
 8000f72:	2201      	movs	r2, #1
 8000f74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f78:	4802      	ldr	r0, [pc, #8]	; (8000f84 <traffic_light_init+0x4c>)
 8000f7a:	f000 fda2 	bl	8001ac2 <HAL_GPIO_WritePin>
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40010800 	.word	0x40010800

08000f88 <traffic_light_update1>:

// vertical
void traffic_light_update1(uint32_t red_cnt, uint32_t yel_cnt, uint32_t gre_cnt){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
	static uint32_t time_in_state = 0;

	if (red_cnt == 0 && yel_cnt == 0 && gre_cnt == 0)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d108      	bne.n	8000fac <traffic_light_update1+0x24>
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d105      	bne.n	8000fac <traffic_light_update1+0x24>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d102      	bne.n	8000fac <traffic_light_update1+0x24>
		traffic_light_init();
 8000fa6:	f7ff ffc7 	bl	8000f38 <traffic_light_init>
 8000faa:	e113      	b.n	80011d4 <traffic_light_update1+0x24c>

	// mode: normal
	else if (red_cnt > 0 && yel_cnt > 0 && gre_cnt > 0){
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 80d9 	beq.w	8001166 <traffic_light_update1+0x1de>
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 80d5 	beq.w	8001166 <traffic_light_update1+0x1de>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 80d1 	beq.w	8001166 <traffic_light_update1+0x1de>
		switch (lightstate_v){
 8000fc4:	4b85      	ldr	r3, [pc, #532]	; (80011dc <traffic_light_update1+0x254>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	f000 8087 	beq.w	80010dc <traffic_light_update1+0x154>
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	f300 8100 	bgt.w	80011d4 <traffic_light_update1+0x24c>
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d002      	beq.n	8000fde <traffic_light_update1+0x56>
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d040      	beq.n	800105e <traffic_light_update1+0xd6>
 8000fdc:	e0fa      	b.n	80011d4 <traffic_light_update1+0x24c>
			case RED:
				HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2120      	movs	r1, #32
 8000fe2:	487f      	ldr	r0, [pc, #508]	; (80011e0 <traffic_light_update1+0x258>)
 8000fe4:	f000 fd6d 	bl	8001ac2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YEL_1_GPIO_Port, YEL_1_Pin, 1);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2140      	movs	r1, #64	; 0x40
 8000fec:	487c      	ldr	r0, [pc, #496]	; (80011e0 <traffic_light_update1+0x258>)
 8000fee:	f000 fd68 	bl	8001ac2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRE_1_GPIO_Port, GRE_1_Pin, 1);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	487a      	ldr	r0, [pc, #488]	; (80011e0 <traffic_light_update1+0x258>)
 8000ff8:	f000 fd63 	bl	8001ac2 <HAL_GPIO_WritePin>

				UpdateBuffer_7SEG_LEDS(0, (red_cnt - time_in_state)/10);
 8000ffc:	4b79      	ldr	r3, [pc, #484]	; (80011e4 <traffic_light_update1+0x25c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	4a78      	ldr	r2, [pc, #480]	; (80011e8 <traffic_light_update1+0x260>)
 8001006:	fba2 2303 	umull	r2, r3, r2, r3
 800100a:	08db      	lsrs	r3, r3, #3
 800100c:	b2db      	uxtb	r3, r3
 800100e:	4619      	mov	r1, r3
 8001010:	2000      	movs	r0, #0
 8001012:	f7ff fc65 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				UpdateBuffer_7SEG_LEDS(1, (red_cnt - time_in_state)%10);
 8001016:	4b73      	ldr	r3, [pc, #460]	; (80011e4 <traffic_light_update1+0x25c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	1ad1      	subs	r1, r2, r3
 800101e:	4b72      	ldr	r3, [pc, #456]	; (80011e8 <traffic_light_update1+0x260>)
 8001020:	fba3 2301 	umull	r2, r3, r3, r1
 8001024:	08da      	lsrs	r2, r3, #3
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	1aca      	subs	r2, r1, r3
 8001030:	b2d3      	uxtb	r3, r2
 8001032:	4619      	mov	r1, r3
 8001034:	2001      	movs	r0, #1
 8001036:	f7ff fc53 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				if (++time_in_state == red_cnt){
 800103a:	4b6a      	ldr	r3, [pc, #424]	; (80011e4 <traffic_light_update1+0x25c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	4a68      	ldr	r2, [pc, #416]	; (80011e4 <traffic_light_update1+0x25c>)
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	4b67      	ldr	r3, [pc, #412]	; (80011e4 <traffic_light_update1+0x25c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	429a      	cmp	r2, r3
 800104c:	f040 8085 	bne.w	800115a <traffic_light_update1+0x1d2>
					lightstate_v = GRE;
 8001050:	4b62      	ldr	r3, [pc, #392]	; (80011dc <traffic_light_update1+0x254>)
 8001052:	2202      	movs	r2, #2
 8001054:	701a      	strb	r2, [r3, #0]
					time_in_state = 0;
 8001056:	4b63      	ldr	r3, [pc, #396]	; (80011e4 <traffic_light_update1+0x25c>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
				}
				break;
 800105c:	e07d      	b.n	800115a <traffic_light_update1+0x1d2>
			case YEL:
				HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 1);
 800105e:	2201      	movs	r2, #1
 8001060:	2120      	movs	r1, #32
 8001062:	485f      	ldr	r0, [pc, #380]	; (80011e0 <traffic_light_update1+0x258>)
 8001064:	f000 fd2d 	bl	8001ac2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YEL_1_GPIO_Port, YEL_1_Pin, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2140      	movs	r1, #64	; 0x40
 800106c:	485c      	ldr	r0, [pc, #368]	; (80011e0 <traffic_light_update1+0x258>)
 800106e:	f000 fd28 	bl	8001ac2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRE_1_GPIO_Port, GRE_1_Pin, 1);
 8001072:	2201      	movs	r2, #1
 8001074:	2180      	movs	r1, #128	; 0x80
 8001076:	485a      	ldr	r0, [pc, #360]	; (80011e0 <traffic_light_update1+0x258>)
 8001078:	f000 fd23 	bl	8001ac2 <HAL_GPIO_WritePin>

				UpdateBuffer_7SEG_LEDS(0, (yel_cnt - time_in_state)/10);
 800107c:	4b59      	ldr	r3, [pc, #356]	; (80011e4 <traffic_light_update1+0x25c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68ba      	ldr	r2, [r7, #8]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	4a58      	ldr	r2, [pc, #352]	; (80011e8 <traffic_light_update1+0x260>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	08db      	lsrs	r3, r3, #3
 800108c:	b2db      	uxtb	r3, r3
 800108e:	4619      	mov	r1, r3
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff fc25 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				UpdateBuffer_7SEG_LEDS(1, (yel_cnt - time_in_state)%10);
 8001096:	4b53      	ldr	r3, [pc, #332]	; (80011e4 <traffic_light_update1+0x25c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	1ad1      	subs	r1, r2, r3
 800109e:	4b52      	ldr	r3, [pc, #328]	; (80011e8 <traffic_light_update1+0x260>)
 80010a0:	fba3 2301 	umull	r2, r3, r3, r1
 80010a4:	08da      	lsrs	r2, r3, #3
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	1aca      	subs	r2, r1, r3
 80010b0:	b2d3      	uxtb	r3, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	2001      	movs	r0, #1
 80010b6:	f7ff fc13 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				if (++time_in_state == yel_cnt){
 80010ba:	4b4a      	ldr	r3, [pc, #296]	; (80011e4 <traffic_light_update1+0x25c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a48      	ldr	r2, [pc, #288]	; (80011e4 <traffic_light_update1+0x25c>)
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b47      	ldr	r3, [pc, #284]	; (80011e4 <traffic_light_update1+0x25c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68ba      	ldr	r2, [r7, #8]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d147      	bne.n	800115e <traffic_light_update1+0x1d6>
					lightstate_v = RED;
 80010ce:	4b43      	ldr	r3, [pc, #268]	; (80011dc <traffic_light_update1+0x254>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
					time_in_state = 0;
 80010d4:	4b43      	ldr	r3, [pc, #268]	; (80011e4 <traffic_light_update1+0x25c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
				}
				break;
 80010da:	e040      	b.n	800115e <traffic_light_update1+0x1d6>
			case GRE:
				HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 1);
 80010dc:	2201      	movs	r2, #1
 80010de:	2120      	movs	r1, #32
 80010e0:	483f      	ldr	r0, [pc, #252]	; (80011e0 <traffic_light_update1+0x258>)
 80010e2:	f000 fcee 	bl	8001ac2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YEL_1_GPIO_Port, YEL_1_Pin, 1);
 80010e6:	2201      	movs	r2, #1
 80010e8:	2140      	movs	r1, #64	; 0x40
 80010ea:	483d      	ldr	r0, [pc, #244]	; (80011e0 <traffic_light_update1+0x258>)
 80010ec:	f000 fce9 	bl	8001ac2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRE_1_GPIO_Port, GRE_1_Pin, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	483a      	ldr	r0, [pc, #232]	; (80011e0 <traffic_light_update1+0x258>)
 80010f6:	f000 fce4 	bl	8001ac2 <HAL_GPIO_WritePin>

				UpdateBuffer_7SEG_LEDS(0, (gre_cnt - time_in_state)/10);
 80010fa:	4b3a      	ldr	r3, [pc, #232]	; (80011e4 <traffic_light_update1+0x25c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	4a39      	ldr	r2, [pc, #228]	; (80011e8 <traffic_light_update1+0x260>)
 8001104:	fba2 2303 	umull	r2, r3, r2, r3
 8001108:	08db      	lsrs	r3, r3, #3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	4619      	mov	r1, r3
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff fbe6 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				UpdateBuffer_7SEG_LEDS(1, (gre_cnt - time_in_state)%10);
 8001114:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <traffic_light_update1+0x25c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	1ad1      	subs	r1, r2, r3
 800111c:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <traffic_light_update1+0x260>)
 800111e:	fba3 2301 	umull	r2, r3, r3, r1
 8001122:	08da      	lsrs	r2, r3, #3
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	1aca      	subs	r2, r1, r3
 800112e:	b2d3      	uxtb	r3, r2
 8001130:	4619      	mov	r1, r3
 8001132:	2001      	movs	r0, #1
 8001134:	f7ff fbd4 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				if (++time_in_state == gre_cnt){
 8001138:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <traffic_light_update1+0x25c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	3301      	adds	r3, #1
 800113e:	4a29      	ldr	r2, [pc, #164]	; (80011e4 <traffic_light_update1+0x25c>)
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <traffic_light_update1+0x25c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	429a      	cmp	r2, r3
 800114a:	d10a      	bne.n	8001162 <traffic_light_update1+0x1da>
					lightstate_v = YEL;
 800114c:	4b23      	ldr	r3, [pc, #140]	; (80011dc <traffic_light_update1+0x254>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
					time_in_state = 0;
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <traffic_light_update1+0x25c>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
				}
				break;
 8001158:	e003      	b.n	8001162 <traffic_light_update1+0x1da>
				break;
 800115a:	bf00      	nop
 800115c:	e03a      	b.n	80011d4 <traffic_light_update1+0x24c>
				break;
 800115e:	bf00      	nop
 8001160:	e038      	b.n	80011d4 <traffic_light_update1+0x24c>
				break;
 8001162:	bf00      	nop
		switch (lightstate_v){
 8001164:	e036      	b.n	80011d4 <traffic_light_update1+0x24c>
		}
	}

	// mode: adjust
	else {
		if (red_cnt == 0) {
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10e      	bne.n	800118a <traffic_light_update1+0x202>
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2120      	movs	r1, #32
 8001170:	481b      	ldr	r0, [pc, #108]	; (80011e0 <traffic_light_update1+0x258>)
 8001172:	f000 fca6 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YEL_1_GPIO_Port, YEL_1_Pin, 1);
 8001176:	2201      	movs	r2, #1
 8001178:	2140      	movs	r1, #64	; 0x40
 800117a:	4819      	ldr	r0, [pc, #100]	; (80011e0 <traffic_light_update1+0x258>)
 800117c:	f000 fca1 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GRE_1_GPIO_Port, GRE_1_Pin, 1);
 8001180:	2201      	movs	r2, #1
 8001182:	2180      	movs	r1, #128	; 0x80
 8001184:	4816      	ldr	r0, [pc, #88]	; (80011e0 <traffic_light_update1+0x258>)
 8001186:	f000 fc9c 	bl	8001ac2 <HAL_GPIO_WritePin>
		}
		if (yel_cnt == 0) {
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d10e      	bne.n	80011ae <traffic_light_update1+0x226>
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 1);
 8001190:	2201      	movs	r2, #1
 8001192:	2120      	movs	r1, #32
 8001194:	4812      	ldr	r0, [pc, #72]	; (80011e0 <traffic_light_update1+0x258>)
 8001196:	f000 fc94 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YEL_1_GPIO_Port, YEL_1_Pin, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2140      	movs	r1, #64	; 0x40
 800119e:	4810      	ldr	r0, [pc, #64]	; (80011e0 <traffic_light_update1+0x258>)
 80011a0:	f000 fc8f 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GRE_1_GPIO_Port, GRE_1_Pin, 1);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2180      	movs	r1, #128	; 0x80
 80011a8:	480d      	ldr	r0, [pc, #52]	; (80011e0 <traffic_light_update1+0x258>)
 80011aa:	f000 fc8a 	bl	8001ac2 <HAL_GPIO_WritePin>
		}
		if (gre_cnt == 0) {
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d10f      	bne.n	80011d4 <traffic_light_update1+0x24c>
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 1);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2120      	movs	r1, #32
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <traffic_light_update1+0x258>)
 80011ba:	f000 fc82 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YEL_1_GPIO_Port, YEL_1_Pin, 1);
 80011be:	2201      	movs	r2, #1
 80011c0:	2140      	movs	r1, #64	; 0x40
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <traffic_light_update1+0x258>)
 80011c4:	f000 fc7d 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GRE_1_GPIO_Port, GRE_1_Pin, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2180      	movs	r1, #128	; 0x80
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <traffic_light_update1+0x258>)
 80011ce:	f000 fc78 	bl	8001ac2 <HAL_GPIO_WritePin>
		}
	}
}
 80011d2:	e7ff      	b.n	80011d4 <traffic_light_update1+0x24c>
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200000bd 	.word	0x200000bd
 80011e0:	40010800 	.word	0x40010800
 80011e4:	200000c0 	.word	0x200000c0
 80011e8:	cccccccd 	.word	0xcccccccd

080011ec <traffic_light_update2>:

// horizontal
void traffic_light_update2(uint32_t red_cnt, uint32_t yel_cnt, uint32_t gre_cnt){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
	static uint32_t time_in_state = 0;

	if (red_cnt == 0 && yel_cnt == 0 && gre_cnt == 0)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d108      	bne.n	8001210 <traffic_light_update2+0x24>
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d105      	bne.n	8001210 <traffic_light_update2+0x24>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <traffic_light_update2+0x24>
		traffic_light_init();
 800120a:	f7ff fe95 	bl	8000f38 <traffic_light_init>
 800120e:	e125      	b.n	800145c <traffic_light_update2+0x270>

	// mode: normal
	else if (red_cnt > 0 && yel_cnt > 0 && gre_cnt > 0){
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 80e2 	beq.w	80013dc <traffic_light_update2+0x1f0>
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 80de 	beq.w	80013dc <traffic_light_update2+0x1f0>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 80da 	beq.w	80013dc <traffic_light_update2+0x1f0>
		switch (lightstate_h){
 8001228:	4b8e      	ldr	r3, [pc, #568]	; (8001464 <traffic_light_update2+0x278>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b02      	cmp	r3, #2
 800122e:	f000 808d 	beq.w	800134c <traffic_light_update2+0x160>
 8001232:	2b02      	cmp	r3, #2
 8001234:	f300 8112 	bgt.w	800145c <traffic_light_update2+0x270>
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <traffic_light_update2+0x56>
 800123c:	2b01      	cmp	r3, #1
 800123e:	d043      	beq.n	80012c8 <traffic_light_update2+0xdc>
 8001240:	e10c      	b.n	800145c <traffic_light_update2+0x270>
			case RED:
				HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001248:	4887      	ldr	r0, [pc, #540]	; (8001468 <traffic_light_update2+0x27c>)
 800124a:	f000 fc3a 	bl	8001ac2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YEL_2_GPIO_Port, YEL_2_Pin, 1);
 800124e:	2201      	movs	r2, #1
 8001250:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001254:	4884      	ldr	r0, [pc, #528]	; (8001468 <traffic_light_update2+0x27c>)
 8001256:	f000 fc34 	bl	8001ac2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRE_2_GPIO_Port, GRE_2_Pin, 1);
 800125a:	2201      	movs	r2, #1
 800125c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001260:	4881      	ldr	r0, [pc, #516]	; (8001468 <traffic_light_update2+0x27c>)
 8001262:	f000 fc2e 	bl	8001ac2 <HAL_GPIO_WritePin>

				UpdateBuffer_7SEG_LEDS(2, (red_cnt - time_in_state)/10);
 8001266:	4b81      	ldr	r3, [pc, #516]	; (800146c <traffic_light_update2+0x280>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	4a80      	ldr	r2, [pc, #512]	; (8001470 <traffic_light_update2+0x284>)
 8001270:	fba2 2303 	umull	r2, r3, r2, r3
 8001274:	08db      	lsrs	r3, r3, #3
 8001276:	b2db      	uxtb	r3, r3
 8001278:	4619      	mov	r1, r3
 800127a:	2002      	movs	r0, #2
 800127c:	f7ff fb30 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				UpdateBuffer_7SEG_LEDS(3, (red_cnt - time_in_state)%10);
 8001280:	4b7a      	ldr	r3, [pc, #488]	; (800146c <traffic_light_update2+0x280>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	1ad1      	subs	r1, r2, r3
 8001288:	4b79      	ldr	r3, [pc, #484]	; (8001470 <traffic_light_update2+0x284>)
 800128a:	fba3 2301 	umull	r2, r3, r3, r1
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	1aca      	subs	r2, r1, r3
 800129a:	b2d3      	uxtb	r3, r2
 800129c:	4619      	mov	r1, r3
 800129e:	2003      	movs	r0, #3
 80012a0:	f7ff fb1e 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				if (++time_in_state == red_cnt){
 80012a4:	4b71      	ldr	r3, [pc, #452]	; (800146c <traffic_light_update2+0x280>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	4a70      	ldr	r2, [pc, #448]	; (800146c <traffic_light_update2+0x280>)
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	4b6f      	ldr	r3, [pc, #444]	; (800146c <traffic_light_update2+0x280>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	f040 808b 	bne.w	80013d0 <traffic_light_update2+0x1e4>
					lightstate_h = GRE;
 80012ba:	4b6a      	ldr	r3, [pc, #424]	; (8001464 <traffic_light_update2+0x278>)
 80012bc:	2202      	movs	r2, #2
 80012be:	701a      	strb	r2, [r3, #0]
					time_in_state = 0;
 80012c0:	4b6a      	ldr	r3, [pc, #424]	; (800146c <traffic_light_update2+0x280>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
				}
				break;
 80012c6:	e083      	b.n	80013d0 <traffic_light_update2+0x1e4>
			case YEL:
				HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 1);
 80012c8:	2201      	movs	r2, #1
 80012ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ce:	4866      	ldr	r0, [pc, #408]	; (8001468 <traffic_light_update2+0x27c>)
 80012d0:	f000 fbf7 	bl	8001ac2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YEL_2_GPIO_Port, YEL_2_Pin, 0);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012da:	4863      	ldr	r0, [pc, #396]	; (8001468 <traffic_light_update2+0x27c>)
 80012dc:	f000 fbf1 	bl	8001ac2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRE_2_GPIO_Port, GRE_2_Pin, 1);
 80012e0:	2201      	movs	r2, #1
 80012e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e6:	4860      	ldr	r0, [pc, #384]	; (8001468 <traffic_light_update2+0x27c>)
 80012e8:	f000 fbeb 	bl	8001ac2 <HAL_GPIO_WritePin>

				UpdateBuffer_7SEG_LEDS(2, (yel_cnt - time_in_state)/10);
 80012ec:	4b5f      	ldr	r3, [pc, #380]	; (800146c <traffic_light_update2+0x280>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	4a5e      	ldr	r2, [pc, #376]	; (8001470 <traffic_light_update2+0x284>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	08db      	lsrs	r3, r3, #3
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4619      	mov	r1, r3
 8001300:	2002      	movs	r0, #2
 8001302:	f7ff faed 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				UpdateBuffer_7SEG_LEDS(3, (yel_cnt - time_in_state)%10);
 8001306:	4b59      	ldr	r3, [pc, #356]	; (800146c <traffic_light_update2+0x280>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	1ad1      	subs	r1, r2, r3
 800130e:	4b58      	ldr	r3, [pc, #352]	; (8001470 <traffic_light_update2+0x284>)
 8001310:	fba3 2301 	umull	r2, r3, r3, r1
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	1aca      	subs	r2, r1, r3
 8001320:	b2d3      	uxtb	r3, r2
 8001322:	4619      	mov	r1, r3
 8001324:	2003      	movs	r0, #3
 8001326:	f7ff fadb 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				if (++time_in_state == yel_cnt){
 800132a:	4b50      	ldr	r3, [pc, #320]	; (800146c <traffic_light_update2+0x280>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	4a4e      	ldr	r2, [pc, #312]	; (800146c <traffic_light_update2+0x280>)
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b4d      	ldr	r3, [pc, #308]	; (800146c <traffic_light_update2+0x280>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	429a      	cmp	r2, r3
 800133c:	d14a      	bne.n	80013d4 <traffic_light_update2+0x1e8>
					lightstate_h = RED;
 800133e:	4b49      	ldr	r3, [pc, #292]	; (8001464 <traffic_light_update2+0x278>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
					time_in_state = 0;
 8001344:	4b49      	ldr	r3, [pc, #292]	; (800146c <traffic_light_update2+0x280>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
				}
				break;
 800134a:	e043      	b.n	80013d4 <traffic_light_update2+0x1e8>
			case GRE:
				HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 1);
 800134c:	2201      	movs	r2, #1
 800134e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001352:	4845      	ldr	r0, [pc, #276]	; (8001468 <traffic_light_update2+0x27c>)
 8001354:	f000 fbb5 	bl	8001ac2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YEL_2_GPIO_Port, YEL_2_Pin, 1);
 8001358:	2201      	movs	r2, #1
 800135a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800135e:	4842      	ldr	r0, [pc, #264]	; (8001468 <traffic_light_update2+0x27c>)
 8001360:	f000 fbaf 	bl	8001ac2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRE_2_GPIO_Port, GRE_2_Pin, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800136a:	483f      	ldr	r0, [pc, #252]	; (8001468 <traffic_light_update2+0x27c>)
 800136c:	f000 fba9 	bl	8001ac2 <HAL_GPIO_WritePin>

				UpdateBuffer_7SEG_LEDS(2, (gre_cnt - time_in_state)/10);
 8001370:	4b3e      	ldr	r3, [pc, #248]	; (800146c <traffic_light_update2+0x280>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	4a3d      	ldr	r2, [pc, #244]	; (8001470 <traffic_light_update2+0x284>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	08db      	lsrs	r3, r3, #3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	4619      	mov	r1, r3
 8001384:	2002      	movs	r0, #2
 8001386:	f7ff faab 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				UpdateBuffer_7SEG_LEDS(3, (gre_cnt - time_in_state)%10);
 800138a:	4b38      	ldr	r3, [pc, #224]	; (800146c <traffic_light_update2+0x280>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	1ad1      	subs	r1, r2, r3
 8001392:	4b37      	ldr	r3, [pc, #220]	; (8001470 <traffic_light_update2+0x284>)
 8001394:	fba3 2301 	umull	r2, r3, r3, r1
 8001398:	08da      	lsrs	r2, r3, #3
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	1aca      	subs	r2, r1, r3
 80013a4:	b2d3      	uxtb	r3, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	2003      	movs	r0, #3
 80013aa:	f7ff fa99 	bl	80008e0 <UpdateBuffer_7SEG_LEDS>
				if (++time_in_state == gre_cnt){
 80013ae:	4b2f      	ldr	r3, [pc, #188]	; (800146c <traffic_light_update2+0x280>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	4a2d      	ldr	r2, [pc, #180]	; (800146c <traffic_light_update2+0x280>)
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	4b2c      	ldr	r3, [pc, #176]	; (800146c <traffic_light_update2+0x280>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d10a      	bne.n	80013d8 <traffic_light_update2+0x1ec>
					lightstate_h = YEL;
 80013c2:	4b28      	ldr	r3, [pc, #160]	; (8001464 <traffic_light_update2+0x278>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	701a      	strb	r2, [r3, #0]
					time_in_state = 0;
 80013c8:	4b28      	ldr	r3, [pc, #160]	; (800146c <traffic_light_update2+0x280>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
				}
				break;
 80013ce:	e003      	b.n	80013d8 <traffic_light_update2+0x1ec>
				break;
 80013d0:	bf00      	nop
 80013d2:	e043      	b.n	800145c <traffic_light_update2+0x270>
				break;
 80013d4:	bf00      	nop
 80013d6:	e041      	b.n	800145c <traffic_light_update2+0x270>
				break;
 80013d8:	bf00      	nop
		switch (lightstate_h){
 80013da:	e03f      	b.n	800145c <traffic_light_update2+0x270>
		}
	}

	// mode: adjust
	else {
		if (red_cnt == 0) {
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d111      	bne.n	8001406 <traffic_light_update2+0x21a>
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e8:	481f      	ldr	r0, [pc, #124]	; (8001468 <traffic_light_update2+0x27c>)
 80013ea:	f000 fb6a 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YEL_2_GPIO_Port, YEL_2_Pin, 1);
 80013ee:	2201      	movs	r2, #1
 80013f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f4:	481c      	ldr	r0, [pc, #112]	; (8001468 <traffic_light_update2+0x27c>)
 80013f6:	f000 fb64 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GRE_2_GPIO_Port, GRE_2_Pin, 1);
 80013fa:	2201      	movs	r2, #1
 80013fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001400:	4819      	ldr	r0, [pc, #100]	; (8001468 <traffic_light_update2+0x27c>)
 8001402:	f000 fb5e 	bl	8001ac2 <HAL_GPIO_WritePin>
		}
		if (yel_cnt == 0) {
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d111      	bne.n	8001430 <traffic_light_update2+0x244>
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 1);
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001412:	4815      	ldr	r0, [pc, #84]	; (8001468 <traffic_light_update2+0x27c>)
 8001414:	f000 fb55 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YEL_2_GPIO_Port, YEL_2_Pin, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800141e:	4812      	ldr	r0, [pc, #72]	; (8001468 <traffic_light_update2+0x27c>)
 8001420:	f000 fb4f 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GRE_2_GPIO_Port, GRE_2_Pin, 1);
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800142a:	480f      	ldr	r0, [pc, #60]	; (8001468 <traffic_light_update2+0x27c>)
 800142c:	f000 fb49 	bl	8001ac2 <HAL_GPIO_WritePin>
		}
		if (gre_cnt == 0) {
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d112      	bne.n	800145c <traffic_light_update2+0x270>
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 1);
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 7180 	mov.w	r1, #256	; 0x100
 800143c:	480a      	ldr	r0, [pc, #40]	; (8001468 <traffic_light_update2+0x27c>)
 800143e:	f000 fb40 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YEL_2_GPIO_Port, YEL_2_Pin, 1);
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001448:	4807      	ldr	r0, [pc, #28]	; (8001468 <traffic_light_update2+0x27c>)
 800144a:	f000 fb3a 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GRE_2_GPIO_Port, GRE_2_Pin, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <traffic_light_update2+0x27c>)
 8001456:	f000 fb34 	bl	8001ac2 <HAL_GPIO_WritePin>
		}
	}
}
 800145a:	e7ff      	b.n	800145c <traffic_light_update2+0x270>
 800145c:	bf00      	nop
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	2000006c 	.word	0x2000006c
 8001468:	40010800 	.word	0x40010800
 800146c:	200000c4 	.word	0x200000c4
 8001470:	cccccccd 	.word	0xcccccccd

08001474 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001476:	490d      	ldr	r1, [pc, #52]	; (80014ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001478:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800147c:	e002      	b.n	8001484 <LoopCopyDataInit>

0800147e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001482:	3304      	adds	r3, #4

08001484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001488:	d3f9      	bcc.n	800147e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800148c:	4c0a      	ldr	r4, [pc, #40]	; (80014b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001490:	e001      	b.n	8001496 <LoopFillZerobss>

08001492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001494:	3204      	adds	r2, #4

08001496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001498:	d3fb      	bcc.n	8001492 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800149a:	f7ff fce5 	bl	8000e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800149e:	f001 faf5 	bl	8002a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014a2:	f7ff fad9 	bl	8000a58 <main>
  bx lr
 80014a6:	4770      	bx	lr
  ldr r0, =_sdata
 80014a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ac:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80014b0:	08002b24 	.word	0x08002b24
  ldr r2, =_sbss
 80014b4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80014b8:	20000124 	.word	0x20000124

080014bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014bc:	e7fe      	b.n	80014bc <ADC1_2_IRQHandler>
	...

080014c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_Init+0x28>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_Init+0x28>)
 80014ca:	f043 0310 	orr.w	r3, r3, #16
 80014ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d0:	2003      	movs	r0, #3
 80014d2:	f000 f923 	bl	800171c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d6:	200f      	movs	r0, #15
 80014d8:	f000 f808 	bl	80014ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014dc:	f7ff fc3c 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40022000 	.word	0x40022000

080014ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_InitTick+0x54>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_InitTick+0x58>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001502:	fbb3 f3f1 	udiv	r3, r3, r1
 8001506:	fbb2 f3f3 	udiv	r3, r2, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f93b 	bl	8001786 <HAL_SYSTICK_Config>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e00e      	b.n	8001538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b0f      	cmp	r3, #15
 800151e:	d80a      	bhi.n	8001536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001520:	2200      	movs	r2, #0
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f000 f903 	bl	8001732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800152c:	4a06      	ldr	r2, [pc, #24]	; (8001548 <HAL_InitTick+0x5c>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	e000      	b.n	8001538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000068 	.word	0x20000068
 8001544:	20000074 	.word	0x20000074
 8001548:	20000070 	.word	0x20000070

0800154c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_IncTick+0x1c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_IncTick+0x20>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4413      	add	r3, r2
 800155c:	4a03      	ldr	r2, [pc, #12]	; (800156c <HAL_IncTick+0x20>)
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	20000074 	.word	0x20000074
 800156c:	20000120 	.word	0x20000120

08001570 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b02      	ldr	r3, [pc, #8]	; (8001580 <HAL_GetTick+0x10>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	20000120 	.word	0x20000120

08001584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	db0b      	blt.n	8001612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 021f 	and.w	r2, r3, #31
 8001600:	4906      	ldr	r1, [pc, #24]	; (800161c <__NVIC_EnableIRQ+0x34>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	2001      	movs	r0, #1
 800160a:	fa00 f202 	lsl.w	r2, r0, r2
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	e000e100 	.word	0xe000e100

08001620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001630:	2b00      	cmp	r3, #0
 8001632:	db0a      	blt.n	800164a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	b2da      	uxtb	r2, r3
 8001638:	490c      	ldr	r1, [pc, #48]	; (800166c <__NVIC_SetPriority+0x4c>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	0112      	lsls	r2, r2, #4
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	440b      	add	r3, r1
 8001644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001648:	e00a      	b.n	8001660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4908      	ldr	r1, [pc, #32]	; (8001670 <__NVIC_SetPriority+0x50>)
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	3b04      	subs	r3, #4
 8001658:	0112      	lsls	r2, r2, #4
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	440b      	add	r3, r1
 800165e:	761a      	strb	r2, [r3, #24]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e100 	.word	0xe000e100
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f1c3 0307 	rsb	r3, r3, #7
 800168e:	2b04      	cmp	r3, #4
 8001690:	bf28      	it	cs
 8001692:	2304      	movcs	r3, #4
 8001694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3304      	adds	r3, #4
 800169a:	2b06      	cmp	r3, #6
 800169c:	d902      	bls.n	80016a4 <NVIC_EncodePriority+0x30>
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3b03      	subs	r3, #3
 80016a2:	e000      	b.n	80016a6 <NVIC_EncodePriority+0x32>
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43da      	mvns	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	401a      	ands	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43d9      	mvns	r1, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	4313      	orrs	r3, r2
         );
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3724      	adds	r7, #36	; 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e8:	d301      	bcc.n	80016ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00f      	b.n	800170e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <SysTick_Config+0x40>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f6:	210f      	movs	r1, #15
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f7ff ff90 	bl	8001620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <SysTick_Config+0x40>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <SysTick_Config+0x40>)
 8001708:	2207      	movs	r2, #7
 800170a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	e000e010 	.word	0xe000e010

0800171c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff2d 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001744:	f7ff ff42 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	6978      	ldr	r0, [r7, #20]
 8001750:	f7ff ff90 	bl	8001674 <NVIC_EncodePriority>
 8001754:	4602      	mov	r2, r0
 8001756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff5f 	bl	8001620 <__NVIC_SetPriority>
}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff35 	bl	80015e8 <__NVIC_EnableIRQ>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ffa2 	bl	80016d8 <SysTick_Config>
 8001794:	4603      	mov	r3, r0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b08b      	sub	sp, #44	; 0x2c
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017aa:	2300      	movs	r3, #0
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b2:	e148      	b.n	8001a46 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017b4:	2201      	movs	r2, #1
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	f040 8137 	bne.w	8001a40 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4aa3      	ldr	r2, [pc, #652]	; (8001a64 <HAL_GPIO_Init+0x2c4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d05e      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 80017dc:	4aa1      	ldr	r2, [pc, #644]	; (8001a64 <HAL_GPIO_Init+0x2c4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d875      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 80017e2:	4aa1      	ldr	r2, [pc, #644]	; (8001a68 <HAL_GPIO_Init+0x2c8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d058      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 80017e8:	4a9f      	ldr	r2, [pc, #636]	; (8001a68 <HAL_GPIO_Init+0x2c8>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d86f      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 80017ee:	4a9f      	ldr	r2, [pc, #636]	; (8001a6c <HAL_GPIO_Init+0x2cc>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d052      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 80017f4:	4a9d      	ldr	r2, [pc, #628]	; (8001a6c <HAL_GPIO_Init+0x2cc>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d869      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 80017fa:	4a9d      	ldr	r2, [pc, #628]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d04c      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 8001800:	4a9b      	ldr	r2, [pc, #620]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d863      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 8001806:	4a9b      	ldr	r2, [pc, #620]	; (8001a74 <HAL_GPIO_Init+0x2d4>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d046      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 800180c:	4a99      	ldr	r2, [pc, #612]	; (8001a74 <HAL_GPIO_Init+0x2d4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d85d      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 8001812:	2b12      	cmp	r3, #18
 8001814:	d82a      	bhi.n	800186c <HAL_GPIO_Init+0xcc>
 8001816:	2b12      	cmp	r3, #18
 8001818:	d859      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 800181a:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <HAL_GPIO_Init+0x80>)
 800181c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001820:	0800189b 	.word	0x0800189b
 8001824:	08001875 	.word	0x08001875
 8001828:	08001887 	.word	0x08001887
 800182c:	080018c9 	.word	0x080018c9
 8001830:	080018cf 	.word	0x080018cf
 8001834:	080018cf 	.word	0x080018cf
 8001838:	080018cf 	.word	0x080018cf
 800183c:	080018cf 	.word	0x080018cf
 8001840:	080018cf 	.word	0x080018cf
 8001844:	080018cf 	.word	0x080018cf
 8001848:	080018cf 	.word	0x080018cf
 800184c:	080018cf 	.word	0x080018cf
 8001850:	080018cf 	.word	0x080018cf
 8001854:	080018cf 	.word	0x080018cf
 8001858:	080018cf 	.word	0x080018cf
 800185c:	080018cf 	.word	0x080018cf
 8001860:	080018cf 	.word	0x080018cf
 8001864:	0800187d 	.word	0x0800187d
 8001868:	08001891 	.word	0x08001891
 800186c:	4a82      	ldr	r2, [pc, #520]	; (8001a78 <HAL_GPIO_Init+0x2d8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d013      	beq.n	800189a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001872:	e02c      	b.n	80018ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	623b      	str	r3, [r7, #32]
          break;
 800187a:	e029      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	3304      	adds	r3, #4
 8001882:	623b      	str	r3, [r7, #32]
          break;
 8001884:	e024      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	3308      	adds	r3, #8
 800188c:	623b      	str	r3, [r7, #32]
          break;
 800188e:	e01f      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	330c      	adds	r3, #12
 8001896:	623b      	str	r3, [r7, #32]
          break;
 8001898:	e01a      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018a2:	2304      	movs	r3, #4
 80018a4:	623b      	str	r3, [r7, #32]
          break;
 80018a6:	e013      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d105      	bne.n	80018bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b0:	2308      	movs	r3, #8
 80018b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	611a      	str	r2, [r3, #16]
          break;
 80018ba:	e009      	b.n	80018d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018bc:	2308      	movs	r3, #8
 80018be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	615a      	str	r2, [r3, #20]
          break;
 80018c6:	e003      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
          break;
 80018cc:	e000      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          break;
 80018ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2bff      	cmp	r3, #255	; 0xff
 80018d4:	d801      	bhi.n	80018da <HAL_GPIO_Init+0x13a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	e001      	b.n	80018de <HAL_GPIO_Init+0x13e>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3304      	adds	r3, #4
 80018de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2bff      	cmp	r3, #255	; 0xff
 80018e4:	d802      	bhi.n	80018ec <HAL_GPIO_Init+0x14c>
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	e002      	b.n	80018f2 <HAL_GPIO_Init+0x152>
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	3b08      	subs	r3, #8
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	210f      	movs	r1, #15
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	401a      	ands	r2, r3
 8001904:	6a39      	ldr	r1, [r7, #32]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	431a      	orrs	r2, r3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 8090 	beq.w	8001a40 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001920:	4b56      	ldr	r3, [pc, #344]	; (8001a7c <HAL_GPIO_Init+0x2dc>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a55      	ldr	r2, [pc, #340]	; (8001a7c <HAL_GPIO_Init+0x2dc>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6193      	str	r3, [r2, #24]
 800192c:	4b53      	ldr	r3, [pc, #332]	; (8001a7c <HAL_GPIO_Init+0x2dc>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001938:	4a51      	ldr	r2, [pc, #324]	; (8001a80 <HAL_GPIO_Init+0x2e0>)
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3302      	adds	r3, #2
 8001940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001944:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	220f      	movs	r2, #15
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4013      	ands	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a49      	ldr	r2, [pc, #292]	; (8001a84 <HAL_GPIO_Init+0x2e4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d00d      	beq.n	8001980 <HAL_GPIO_Init+0x1e0>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a48      	ldr	r2, [pc, #288]	; (8001a88 <HAL_GPIO_Init+0x2e8>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d007      	beq.n	800197c <HAL_GPIO_Init+0x1dc>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a47      	ldr	r2, [pc, #284]	; (8001a8c <HAL_GPIO_Init+0x2ec>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d101      	bne.n	8001978 <HAL_GPIO_Init+0x1d8>
 8001974:	2302      	movs	r3, #2
 8001976:	e004      	b.n	8001982 <HAL_GPIO_Init+0x1e2>
 8001978:	2303      	movs	r3, #3
 800197a:	e002      	b.n	8001982 <HAL_GPIO_Init+0x1e2>
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <HAL_GPIO_Init+0x1e2>
 8001980:	2300      	movs	r3, #0
 8001982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001984:	f002 0203 	and.w	r2, r2, #3
 8001988:	0092      	lsls	r2, r2, #2
 800198a:	4093      	lsls	r3, r2
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4313      	orrs	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001992:	493b      	ldr	r1, [pc, #236]	; (8001a80 <HAL_GPIO_Init+0x2e0>)
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	089b      	lsrs	r3, r3, #2
 8001998:	3302      	adds	r3, #2
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d006      	beq.n	80019ba <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019ac:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4937      	ldr	r1, [pc, #220]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	600b      	str	r3, [r1, #0]
 80019b8:	e006      	b.n	80019c8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019ba:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	4933      	ldr	r1, [pc, #204]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d006      	beq.n	80019e2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019d4:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	492d      	ldr	r1, [pc, #180]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019e2:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	4929      	ldr	r1, [pc, #164]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d006      	beq.n	8001a0a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019fc:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	4923      	ldr	r1, [pc, #140]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]
 8001a08:	e006      	b.n	8001a18 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a0a:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	491f      	ldr	r1, [pc, #124]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a24:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	4919      	ldr	r1, [pc, #100]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	60cb      	str	r3, [r1, #12]
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a32:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	4915      	ldr	r1, [pc, #84]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	3301      	adds	r3, #1
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f47f aeaf 	bne.w	80017b4 <HAL_GPIO_Init+0x14>
  }
}
 8001a56:	bf00      	nop
 8001a58:	bf00      	nop
 8001a5a:	372c      	adds	r7, #44	; 0x2c
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	10320000 	.word	0x10320000
 8001a68:	10310000 	.word	0x10310000
 8001a6c:	10220000 	.word	0x10220000
 8001a70:	10210000 	.word	0x10210000
 8001a74:	10120000 	.word	0x10120000
 8001a78:	10110000 	.word	0x10110000
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40010000 	.word	0x40010000
 8001a84:	40010800 	.word	0x40010800
 8001a88:	40010c00 	.word	0x40010c00
 8001a8c:	40011000 	.word	0x40011000
 8001a90:	40010400 	.word	0x40010400

08001a94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	887b      	ldrh	r3, [r7, #2]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	e001      	b.n	8001ab6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	460b      	mov	r3, r1
 8001acc:	807b      	strh	r3, [r7, #2]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ad2:	787b      	ldrb	r3, [r7, #1]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad8:	887a      	ldrh	r2, [r7, #2]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ade:	e003      	b.n	8001ae8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ae0:	887b      	ldrh	r3, [r7, #2]
 8001ae2:	041a      	lsls	r2, r3, #16
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	611a      	str	r2, [r3, #16]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
	...

08001af4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e26c      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 8087 	beq.w	8001c22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b14:	4b92      	ldr	r3, [pc, #584]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d00c      	beq.n	8001b3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b20:	4b8f      	ldr	r3, [pc, #572]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d112      	bne.n	8001b52 <HAL_RCC_OscConfig+0x5e>
 8001b2c:	4b8c      	ldr	r3, [pc, #560]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b38:	d10b      	bne.n	8001b52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3a:	4b89      	ldr	r3, [pc, #548]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d06c      	beq.n	8001c20 <HAL_RCC_OscConfig+0x12c>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d168      	bne.n	8001c20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e246      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_OscConfig+0x76>
 8001b5c:	4b80      	ldr	r3, [pc, #512]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a7f      	ldr	r2, [pc, #508]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	e02e      	b.n	8001bc8 <HAL_RCC_OscConfig+0xd4>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x98>
 8001b72:	4b7b      	ldr	r3, [pc, #492]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a7a      	ldr	r2, [pc, #488]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	4b78      	ldr	r3, [pc, #480]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a77      	ldr	r2, [pc, #476]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e01d      	b.n	8001bc8 <HAL_RCC_OscConfig+0xd4>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b94:	d10c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0xbc>
 8001b96:	4b72      	ldr	r3, [pc, #456]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a71      	ldr	r2, [pc, #452]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	4b6f      	ldr	r3, [pc, #444]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a6e      	ldr	r2, [pc, #440]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e00b      	b.n	8001bc8 <HAL_RCC_OscConfig+0xd4>
 8001bb0:	4b6b      	ldr	r3, [pc, #428]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a6a      	ldr	r2, [pc, #424]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	4b68      	ldr	r3, [pc, #416]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a67      	ldr	r2, [pc, #412]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d013      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fcce 	bl	8001570 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd8:	f7ff fcca 	bl	8001570 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e1fa      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	4b5d      	ldr	r3, [pc, #372]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0xe4>
 8001bf6:	e014      	b.n	8001c22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fcba 	bl	8001570 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c00:	f7ff fcb6 	bl	8001570 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	; 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e1e6      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c12:	4b53      	ldr	r3, [pc, #332]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x10c>
 8001c1e:	e000      	b.n	8001c22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d063      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c2e:	4b4c      	ldr	r3, [pc, #304]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00b      	beq.n	8001c52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c3a:	4b49      	ldr	r3, [pc, #292]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d11c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x18c>
 8001c46:	4b46      	ldr	r3, [pc, #280]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d116      	bne.n	8001c80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c52:	4b43      	ldr	r3, [pc, #268]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <HAL_RCC_OscConfig+0x176>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d001      	beq.n	8001c6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e1ba      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6a:	4b3d      	ldr	r3, [pc, #244]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4939      	ldr	r1, [pc, #228]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7e:	e03a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d020      	beq.n	8001cca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c88:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7ff fc6f 	bl	8001570 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c96:	f7ff fc6b 	bl	8001570 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e19b      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb4:	4b2a      	ldr	r3, [pc, #168]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4927      	ldr	r1, [pc, #156]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]
 8001cc8:	e015      	b.n	8001cf6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cca:	4b26      	ldr	r3, [pc, #152]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fc4e 	bl	8001570 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd8:	f7ff fc4a 	bl	8001570 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e17a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d03a      	beq.n	8001d78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d019      	beq.n	8001d3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d10:	f7ff fc2e 	bl	8001570 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d18:	f7ff fc2a 	bl	8001570 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e15a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d36:	2001      	movs	r0, #1
 8001d38:	f000 faa6 	bl	8002288 <RCC_Delay>
 8001d3c:	e01c      	b.n	8001d78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d44:	f7ff fc14 	bl	8001570 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4a:	e00f      	b.n	8001d6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4c:	f7ff fc10 	bl	8001570 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d908      	bls.n	8001d6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e140      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
 8001d5e:	bf00      	nop
 8001d60:	40021000 	.word	0x40021000
 8001d64:	42420000 	.word	0x42420000
 8001d68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d6c:	4b9e      	ldr	r3, [pc, #632]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1e9      	bne.n	8001d4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80a6 	beq.w	8001ed2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d8a:	4b97      	ldr	r3, [pc, #604]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10d      	bne.n	8001db2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d96:	4b94      	ldr	r3, [pc, #592]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4a93      	ldr	r2, [pc, #588]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da0:	61d3      	str	r3, [r2, #28]
 8001da2:	4b91      	ldr	r3, [pc, #580]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dae:	2301      	movs	r3, #1
 8001db0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db2:	4b8e      	ldr	r3, [pc, #568]	; (8001fec <HAL_RCC_OscConfig+0x4f8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d118      	bne.n	8001df0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dbe:	4b8b      	ldr	r3, [pc, #556]	; (8001fec <HAL_RCC_OscConfig+0x4f8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a8a      	ldr	r2, [pc, #552]	; (8001fec <HAL_RCC_OscConfig+0x4f8>)
 8001dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dca:	f7ff fbd1 	bl	8001570 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd2:	f7ff fbcd 	bl	8001570 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b64      	cmp	r3, #100	; 0x64
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e0fd      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de4:	4b81      	ldr	r3, [pc, #516]	; (8001fec <HAL_RCC_OscConfig+0x4f8>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d106      	bne.n	8001e06 <HAL_RCC_OscConfig+0x312>
 8001df8:	4b7b      	ldr	r3, [pc, #492]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4a7a      	ldr	r2, [pc, #488]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6213      	str	r3, [r2, #32]
 8001e04:	e02d      	b.n	8001e62 <HAL_RCC_OscConfig+0x36e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x334>
 8001e0e:	4b76      	ldr	r3, [pc, #472]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	4a75      	ldr	r2, [pc, #468]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	f023 0301 	bic.w	r3, r3, #1
 8001e18:	6213      	str	r3, [r2, #32]
 8001e1a:	4b73      	ldr	r3, [pc, #460]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4a72      	ldr	r2, [pc, #456]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	f023 0304 	bic.w	r3, r3, #4
 8001e24:	6213      	str	r3, [r2, #32]
 8001e26:	e01c      	b.n	8001e62 <HAL_RCC_OscConfig+0x36e>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b05      	cmp	r3, #5
 8001e2e:	d10c      	bne.n	8001e4a <HAL_RCC_OscConfig+0x356>
 8001e30:	4b6d      	ldr	r3, [pc, #436]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4a6c      	ldr	r2, [pc, #432]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	f043 0304 	orr.w	r3, r3, #4
 8001e3a:	6213      	str	r3, [r2, #32]
 8001e3c:	4b6a      	ldr	r3, [pc, #424]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4a69      	ldr	r2, [pc, #420]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6213      	str	r3, [r2, #32]
 8001e48:	e00b      	b.n	8001e62 <HAL_RCC_OscConfig+0x36e>
 8001e4a:	4b67      	ldr	r3, [pc, #412]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	4a66      	ldr	r2, [pc, #408]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	6213      	str	r3, [r2, #32]
 8001e56:	4b64      	ldr	r3, [pc, #400]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4a63      	ldr	r2, [pc, #396]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	f023 0304 	bic.w	r3, r3, #4
 8001e60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d015      	beq.n	8001e96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6a:	f7ff fb81 	bl	8001570 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7ff fb7d 	bl	8001570 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e0ab      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e88:	4b57      	ldr	r3, [pc, #348]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0ee      	beq.n	8001e72 <HAL_RCC_OscConfig+0x37e>
 8001e94:	e014      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e96:	f7ff fb6b 	bl	8001570 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9e:	f7ff fb67 	bl	8001570 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e095      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb4:	4b4c      	ldr	r3, [pc, #304]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1ee      	bne.n	8001e9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d105      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec6:	4b48      	ldr	r3, [pc, #288]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	4a47      	ldr	r2, [pc, #284]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 8081 	beq.w	8001fde <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001edc:	4b42      	ldr	r3, [pc, #264]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d061      	beq.n	8001fac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d146      	bne.n	8001f7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef0:	4b3f      	ldr	r3, [pc, #252]	; (8001ff0 <HAL_RCC_OscConfig+0x4fc>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef6:	f7ff fb3b 	bl	8001570 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efe:	f7ff fb37 	bl	8001570 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e067      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f10:	4b35      	ldr	r3, [pc, #212]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1f0      	bne.n	8001efe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f24:	d108      	bne.n	8001f38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f26:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	492d      	ldr	r1, [pc, #180]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f38:	4b2b      	ldr	r3, [pc, #172]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a19      	ldr	r1, [r3, #32]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	4927      	ldr	r1, [pc, #156]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f50:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <HAL_RCC_OscConfig+0x4fc>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f56:	f7ff fb0b 	bl	8001570 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5e:	f7ff fb07 	bl	8001570 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e037      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f70:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x46a>
 8001f7c:	e02f      	b.n	8001fde <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <HAL_RCC_OscConfig+0x4fc>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7ff faf4 	bl	8001570 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7ff faf0 	bl	8001570 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e020      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x498>
 8001faa:	e018      	b.n	8001fde <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e013      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40007000 	.word	0x40007000
 8001ff0:	42420060 	.word	0x42420060

08001ff4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0d0      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002008:	4b6a      	ldr	r3, [pc, #424]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d910      	bls.n	8002038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b67      	ldr	r3, [pc, #412]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 0207 	bic.w	r2, r3, #7
 800201e:	4965      	ldr	r1, [pc, #404]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0b8      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d020      	beq.n	8002086 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002050:	4b59      	ldr	r3, [pc, #356]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4a58      	ldr	r2, [pc, #352]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800205a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002068:	4b53      	ldr	r3, [pc, #332]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a52      	ldr	r2, [pc, #328]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002072:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002074:	4b50      	ldr	r3, [pc, #320]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	494d      	ldr	r1, [pc, #308]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d040      	beq.n	8002114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209a:	4b47      	ldr	r3, [pc, #284]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d115      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e07f      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b2:	4b41      	ldr	r3, [pc, #260]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d109      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e073      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c2:	4b3d      	ldr	r3, [pc, #244]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e06b      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020d2:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f023 0203 	bic.w	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4936      	ldr	r1, [pc, #216]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e4:	f7ff fa44 	bl	8001570 <HAL_GetTick>
 80020e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	e00a      	b.n	8002102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ec:	f7ff fa40 	bl	8001570 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e053      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002102:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 020c 	and.w	r2, r3, #12
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	429a      	cmp	r2, r3
 8002112:	d1eb      	bne.n	80020ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002114:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d210      	bcs.n	8002144 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 0207 	bic.w	r2, r3, #7
 800212a:	4922      	ldr	r1, [pc, #136]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e032      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4916      	ldr	r1, [pc, #88]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	490e      	ldr	r1, [pc, #56]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002182:	f000 f821 	bl	80021c8 <HAL_RCC_GetSysClockFreq>
 8002186:	4602      	mov	r2, r0
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	490a      	ldr	r1, [pc, #40]	; (80021bc <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	5ccb      	ldrb	r3, [r1, r3]
 8002196:	fa22 f303 	lsr.w	r3, r2, r3
 800219a:	4a09      	ldr	r2, [pc, #36]	; (80021c0 <HAL_RCC_ClockConfig+0x1cc>)
 800219c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_RCC_ClockConfig+0x1d0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff f9a2 	bl	80014ec <HAL_InitTick>

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40022000 	.word	0x40022000
 80021b8:	40021000 	.word	0x40021000
 80021bc:	08002b0c 	.word	0x08002b0c
 80021c0:	20000068 	.word	0x20000068
 80021c4:	20000070 	.word	0x20000070

080021c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c8:	b490      	push	{r4, r7}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021ce:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021d0:	1d3c      	adds	r4, r7, #4
 80021d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021d8:	f240 2301 	movw	r3, #513	; 0x201
 80021dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	2300      	movs	r3, #0
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021f2:	4b22      	ldr	r3, [pc, #136]	; (800227c <HAL_RCC_GetSysClockFreq+0xb4>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d002      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x40>
 8002202:	2b08      	cmp	r3, #8
 8002204:	d003      	beq.n	800220e <HAL_RCC_GetSysClockFreq+0x46>
 8002206:	e02d      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002208:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HAL_RCC_GetSysClockFreq+0xb8>)
 800220a:	623b      	str	r3, [r7, #32]
      break;
 800220c:	e02d      	b.n	800226a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	0c9b      	lsrs	r3, r3, #18
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800221a:	4413      	add	r3, r2
 800221c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002220:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d013      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <HAL_RCC_GetSysClockFreq+0xb4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	0c5b      	lsrs	r3, r3, #17
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800223a:	4413      	add	r3, r2
 800223c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002240:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	4a0e      	ldr	r2, [pc, #56]	; (8002280 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002246:	fb02 f203 	mul.w	r2, r2, r3
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
 8002252:	e004      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002258:	fb02 f303 	mul.w	r3, r2, r3
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	623b      	str	r3, [r7, #32]
      break;
 8002262:	e002      	b.n	800226a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002266:	623b      	str	r3, [r7, #32]
      break;
 8002268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800226a:	6a3b      	ldr	r3, [r7, #32]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3728      	adds	r7, #40	; 0x28
 8002270:	46bd      	mov	sp, r7
 8002272:	bc90      	pop	{r4, r7}
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	08002afc 	.word	0x08002afc
 800227c:	40021000 	.word	0x40021000
 8002280:	007a1200 	.word	0x007a1200
 8002284:	003d0900 	.word	0x003d0900

08002288 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002290:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <RCC_Delay+0x34>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <RCC_Delay+0x38>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	0a5b      	lsrs	r3, r3, #9
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022a4:	bf00      	nop
  }
  while (Delay --);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1e5a      	subs	r2, r3, #1
 80022aa:	60fa      	str	r2, [r7, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1f9      	bne.n	80022a4 <RCC_Delay+0x1c>
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr
 80022bc:	20000068 	.word	0x20000068
 80022c0:	10624dd3 	.word	0x10624dd3

080022c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e041      	b.n	800235a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fd66 	bl	8000dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3304      	adds	r3, #4
 8002300:	4619      	mov	r1, r3
 8002302:	4610      	mov	r0, r2
 8002304:	f000 fa6a 	bl	80027dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b01      	cmp	r3, #1
 8002376:	d001      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e035      	b.n	80023e8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a16      	ldr	r2, [pc, #88]	; (80023f4 <HAL_TIM_Base_Start_IT+0x90>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d009      	beq.n	80023b2 <HAL_TIM_Base_Start_IT+0x4e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a6:	d004      	beq.n	80023b2 <HAL_TIM_Base_Start_IT+0x4e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <HAL_TIM_Base_Start_IT+0x94>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d111      	bne.n	80023d6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b06      	cmp	r3, #6
 80023c2:	d010      	beq.n	80023e6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0201 	orr.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d4:	e007      	b.n	80023e6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 0201 	orr.w	r2, r2, #1
 80023e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40012c00 	.word	0x40012c00
 80023f8:	40000400 	.word	0x40000400

080023fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b02      	cmp	r3, #2
 8002410:	d122      	bne.n	8002458 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b02      	cmp	r3, #2
 800241e:	d11b      	bne.n	8002458 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f06f 0202 	mvn.w	r2, #2
 8002428:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f9b1 	bl	80027a6 <HAL_TIM_IC_CaptureCallback>
 8002444:	e005      	b.n	8002452 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f9a4 	bl	8002794 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f9b3 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	2b04      	cmp	r3, #4
 8002464:	d122      	bne.n	80024ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b04      	cmp	r3, #4
 8002472:	d11b      	bne.n	80024ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0204 	mvn.w	r2, #4
 800247c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2202      	movs	r2, #2
 8002482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f987 	bl	80027a6 <HAL_TIM_IC_CaptureCallback>
 8002498:	e005      	b.n	80024a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f97a 	bl	8002794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f989 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d122      	bne.n	8002500 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d11b      	bne.n	8002500 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f06f 0208 	mvn.w	r2, #8
 80024d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2204      	movs	r2, #4
 80024d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f95d 	bl	80027a6 <HAL_TIM_IC_CaptureCallback>
 80024ec:	e005      	b.n	80024fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f950 	bl	8002794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f95f 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	2b10      	cmp	r3, #16
 800250c:	d122      	bne.n	8002554 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b10      	cmp	r3, #16
 800251a:	d11b      	bne.n	8002554 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0210 	mvn.w	r2, #16
 8002524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2208      	movs	r2, #8
 800252a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f933 	bl	80027a6 <HAL_TIM_IC_CaptureCallback>
 8002540:	e005      	b.n	800254e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f926 	bl	8002794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f935 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b01      	cmp	r3, #1
 8002560:	d10e      	bne.n	8002580 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b01      	cmp	r3, #1
 800256e:	d107      	bne.n	8002580 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f06f 0201 	mvn.w	r2, #1
 8002578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7fe fcca 	bl	8000f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258a:	2b80      	cmp	r3, #128	; 0x80
 800258c:	d10e      	bne.n	80025ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002598:	2b80      	cmp	r3, #128	; 0x80
 800259a:	d107      	bne.n	80025ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 fa67 	bl	8002a7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b6:	2b40      	cmp	r3, #64	; 0x40
 80025b8:	d10e      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c4:	2b40      	cmp	r3, #64	; 0x40
 80025c6:	d107      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f8f9 	bl	80027ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b20      	cmp	r3, #32
 80025e4:	d10e      	bne.n	8002604 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f003 0320 	and.w	r3, r3, #32
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	d107      	bne.n	8002604 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f06f 0220 	mvn.w	r2, #32
 80025fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fa32 	bl	8002a68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_TIM_ConfigClockSource+0x18>
 8002620:	2302      	movs	r3, #2
 8002622:	e0b3      	b.n	800278c <HAL_TIM_ConfigClockSource+0x180>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2202      	movs	r2, #2
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002642:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800264a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800265c:	d03e      	beq.n	80026dc <HAL_TIM_ConfigClockSource+0xd0>
 800265e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002662:	f200 8087 	bhi.w	8002774 <HAL_TIM_ConfigClockSource+0x168>
 8002666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266a:	f000 8085 	beq.w	8002778 <HAL_TIM_ConfigClockSource+0x16c>
 800266e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002672:	d87f      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x168>
 8002674:	2b70      	cmp	r3, #112	; 0x70
 8002676:	d01a      	beq.n	80026ae <HAL_TIM_ConfigClockSource+0xa2>
 8002678:	2b70      	cmp	r3, #112	; 0x70
 800267a:	d87b      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x168>
 800267c:	2b60      	cmp	r3, #96	; 0x60
 800267e:	d050      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0x116>
 8002680:	2b60      	cmp	r3, #96	; 0x60
 8002682:	d877      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x168>
 8002684:	2b50      	cmp	r3, #80	; 0x50
 8002686:	d03c      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0xf6>
 8002688:	2b50      	cmp	r3, #80	; 0x50
 800268a:	d873      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x168>
 800268c:	2b40      	cmp	r3, #64	; 0x40
 800268e:	d058      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0x136>
 8002690:	2b40      	cmp	r3, #64	; 0x40
 8002692:	d86f      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x168>
 8002694:	2b30      	cmp	r3, #48	; 0x30
 8002696:	d064      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0x156>
 8002698:	2b30      	cmp	r3, #48	; 0x30
 800269a:	d86b      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x168>
 800269c:	2b20      	cmp	r3, #32
 800269e:	d060      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0x156>
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d867      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x168>
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d05c      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0x156>
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	d05a      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026ac:	e062      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6899      	ldr	r1, [r3, #8]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f000 f95c 	bl	800297a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	609a      	str	r2, [r3, #8]
      break;
 80026da:	e04e      	b.n	800277a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6899      	ldr	r1, [r3, #8]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f000 f945 	bl	800297a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026fe:	609a      	str	r2, [r3, #8]
      break;
 8002700:	e03b      	b.n	800277a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6859      	ldr	r1, [r3, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	461a      	mov	r2, r3
 8002710:	f000 f8bc 	bl	800288c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2150      	movs	r1, #80	; 0x50
 800271a:	4618      	mov	r0, r3
 800271c:	f000 f913 	bl	8002946 <TIM_ITRx_SetConfig>
      break;
 8002720:	e02b      	b.n	800277a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6859      	ldr	r1, [r3, #4]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	461a      	mov	r2, r3
 8002730:	f000 f8da 	bl	80028e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2160      	movs	r1, #96	; 0x60
 800273a:	4618      	mov	r0, r3
 800273c:	f000 f903 	bl	8002946 <TIM_ITRx_SetConfig>
      break;
 8002740:	e01b      	b.n	800277a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	6859      	ldr	r1, [r3, #4]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	461a      	mov	r2, r3
 8002750:	f000 f89c 	bl	800288c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2140      	movs	r1, #64	; 0x40
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f8f3 	bl	8002946 <TIM_ITRx_SetConfig>
      break;
 8002760:	e00b      	b.n	800277a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4619      	mov	r1, r3
 800276c:	4610      	mov	r0, r2
 800276e:	f000 f8ea 	bl	8002946 <TIM_ITRx_SetConfig>
        break;
 8002772:	e002      	b.n	800277a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002774:	bf00      	nop
 8002776:	e000      	b.n	800277a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002778:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a25      	ldr	r2, [pc, #148]	; (8002884 <TIM_Base_SetConfig+0xa8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d007      	beq.n	8002804 <TIM_Base_SetConfig+0x28>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fa:	d003      	beq.n	8002804 <TIM_Base_SetConfig+0x28>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a22      	ldr	r2, [pc, #136]	; (8002888 <TIM_Base_SetConfig+0xac>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d108      	bne.n	8002816 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a1a      	ldr	r2, [pc, #104]	; (8002884 <TIM_Base_SetConfig+0xa8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d007      	beq.n	800282e <TIM_Base_SetConfig+0x52>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002824:	d003      	beq.n	800282e <TIM_Base_SetConfig+0x52>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a17      	ldr	r2, [pc, #92]	; (8002888 <TIM_Base_SetConfig+0xac>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d108      	bne.n	8002840 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a07      	ldr	r2, [pc, #28]	; (8002884 <TIM_Base_SetConfig+0xa8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d103      	bne.n	8002874 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	615a      	str	r2, [r3, #20]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	40012c00 	.word	0x40012c00
 8002888:	40000400 	.word	0x40000400

0800288c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	f023 0201 	bic.w	r2, r3, #1
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f023 030a 	bic.w	r3, r3, #10
 80028c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	621a      	str	r2, [r3, #32]
}
 80028de:	bf00      	nop
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	f023 0210 	bic.w	r2, r3, #16
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002912:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	031b      	lsls	r3, r3, #12
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	4313      	orrs	r3, r2
 800291c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002924:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	621a      	str	r2, [r3, #32]
}
 800293c:	bf00      	nop
 800293e:	371c      	adds	r7, #28
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002946:	b480      	push	{r7}
 8002948:	b085      	sub	sp, #20
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	f043 0307 	orr.w	r3, r3, #7
 8002968:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	609a      	str	r2, [r3, #8]
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800297a:	b480      	push	{r7}
 800297c:	b087      	sub	sp, #28
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002994:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	021a      	lsls	r2, r3, #8
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	431a      	orrs	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	609a      	str	r2, [r3, #8]
}
 80029ae:	bf00      	nop
 80029b0:	371c      	adds	r7, #28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e041      	b.n	8002a54 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a14      	ldr	r2, [pc, #80]	; (8002a60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d009      	beq.n	8002a28 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1c:	d004      	beq.n	8002a28 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a10      	ldr	r2, [pc, #64]	; (8002a64 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d10c      	bne.n	8002a42 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40012c00 	.word	0x40012c00
 8002a64:	40000400 	.word	0x40000400

08002a68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <__libc_init_array>:
 8002a8c:	b570      	push	{r4, r5, r6, lr}
 8002a8e:	2600      	movs	r6, #0
 8002a90:	4d0c      	ldr	r5, [pc, #48]	; (8002ac4 <__libc_init_array+0x38>)
 8002a92:	4c0d      	ldr	r4, [pc, #52]	; (8002ac8 <__libc_init_array+0x3c>)
 8002a94:	1b64      	subs	r4, r4, r5
 8002a96:	10a4      	asrs	r4, r4, #2
 8002a98:	42a6      	cmp	r6, r4
 8002a9a:	d109      	bne.n	8002ab0 <__libc_init_array+0x24>
 8002a9c:	f000 f822 	bl	8002ae4 <_init>
 8002aa0:	2600      	movs	r6, #0
 8002aa2:	4d0a      	ldr	r5, [pc, #40]	; (8002acc <__libc_init_array+0x40>)
 8002aa4:	4c0a      	ldr	r4, [pc, #40]	; (8002ad0 <__libc_init_array+0x44>)
 8002aa6:	1b64      	subs	r4, r4, r5
 8002aa8:	10a4      	asrs	r4, r4, #2
 8002aaa:	42a6      	cmp	r6, r4
 8002aac:	d105      	bne.n	8002aba <__libc_init_array+0x2e>
 8002aae:	bd70      	pop	{r4, r5, r6, pc}
 8002ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ab4:	4798      	blx	r3
 8002ab6:	3601      	adds	r6, #1
 8002ab8:	e7ee      	b.n	8002a98 <__libc_init_array+0xc>
 8002aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002abe:	4798      	blx	r3
 8002ac0:	3601      	adds	r6, #1
 8002ac2:	e7f2      	b.n	8002aaa <__libc_init_array+0x1e>
 8002ac4:	08002b1c 	.word	0x08002b1c
 8002ac8:	08002b1c 	.word	0x08002b1c
 8002acc:	08002b1c 	.word	0x08002b1c
 8002ad0:	08002b20 	.word	0x08002b20

08002ad4 <memset>:
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4402      	add	r2, r0
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d100      	bne.n	8002ade <memset+0xa>
 8002adc:	4770      	bx	lr
 8002ade:	f803 1b01 	strb.w	r1, [r3], #1
 8002ae2:	e7f9      	b.n	8002ad8 <memset+0x4>

08002ae4 <_init>:
 8002ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ae6:	bf00      	nop
 8002ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aea:	bc08      	pop	{r3}
 8002aec:	469e      	mov	lr, r3
 8002aee:	4770      	bx	lr

08002af0 <_fini>:
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	bf00      	nop
 8002af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002af6:	bc08      	pop	{r3}
 8002af8:	469e      	mov	lr, r3
 8002afa:	4770      	bx	lr
